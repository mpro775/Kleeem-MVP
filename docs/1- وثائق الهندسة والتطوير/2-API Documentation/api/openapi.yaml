openapi: 3.1.0
info:
  title: Kaleem API — Unified
  version: 1.0.0
  description: Unified spec auto-merged from module specs.
servers:
- url: /api
- url: https://api.kaleem-ai.com
  description: Production
- url: http://localhost:3000
  description: Local Dev
- url: /webhook
- url: /
tags:
- name: Authentication
- name: MerchantPrompt
- name: Merchants
- name: الإشعارات
- name: الخطط
- name: support
- name: System
- name: Usage
- name: Users
paths:
  /admin/analytics/kleem-missing-responses:
    get:
      operationId: admin/analytics/kleem-missing-responses_list_0fe96d
      tags:
      - admin/analytics/kleem-missing-responses
      parameters:
      - $ref: '#/components/parameters/CursorParam'
      - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseCursorPage'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '409':
          $ref: '#/components/responses/Error409'
        '422':
          $ref: '#/components/responses/Error422'
        '429':
          $ref: '#/components/responses/Error429'
        '500':
          $ref: '#/components/responses/Error500'
        '502':
          $ref: '#/components/responses/Error502'
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
  /admin/analytics/kleem-missing-responses/{id}:
    patch:
      operationId: admin/analytics/kleem-missing-responses_update_20b989
      tags:
      - admin/analytics/kleem-missing-responses
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseAny'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '409':
          $ref: '#/components/responses/Error409'
        '422':
          $ref: '#/components/responses/Error422'
        '429':
          $ref: '#/components/responses/Error429'
        '500':
          $ref: '#/components/responses/Error500'
        '502':
          $ref: '#/components/responses/Error502'
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
  /admin/analytics/kleem-missing-responses/bulk-resolve:
    post:
      operationId: admin/analytics/kleem-missing-responses_bulkResolve_1460ab
      tags:
      - admin/analytics/kleem-missing-responses
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseAny'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '409':
          $ref: '#/components/responses/Error409'
        '422':
          $ref: '#/components/responses/Error422'
        '429':
          $ref: '#/components/responses/Error429'
        '500':
          $ref: '#/components/responses/Error500'
        '502':
          $ref: '#/components/responses/Error502'
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
  /analytics/overview:
    get:
      operationId: analytics_ApiOperation_af268c
      tags:
      - analytics
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseAny'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '409':
          $ref: '#/components/responses/Error409'
        '422':
          $ref: '#/components/responses/Error422'
        '429':
          $ref: '#/components/responses/Error429'
        '500':
          $ref: '#/components/responses/Error500'
        '502':
          $ref: '#/components/responses/Error502'
      security:
      - BearerAuth: []
  /analytics/top-keywords:
    get:
      operationId: analytics_ApiOperation_310181
      tags:
      - analytics
      parameters:
      - $ref: '#/components/parameters/CursorParam'
      - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseCursorPage'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '409':
          $ref: '#/components/responses/Error409'
        '422':
          $ref: '#/components/responses/Error422'
        '429':
          $ref: '#/components/responses/Error429'
        '500':
          $ref: '#/components/responses/Error500'
        '502':
          $ref: '#/components/responses/Error502'
      security:
      - BearerAuth: []
  /analytics/messages-timeline:
    get:
      operationId: analytics_ApiOperation_195e47
      tags:
      - analytics
      parameters:
      - $ref: '#/components/parameters/CursorParam'
      - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseCursorPage'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '409':
          $ref: '#/components/responses/Error409'
        '422':
          $ref: '#/components/responses/Error422'
        '429':
          $ref: '#/components/responses/Error429'
        '500':
          $ref: '#/components/responses/Error500'
        '502':
          $ref: '#/components/responses/Error502'
      security:
      - BearerAuth: []
  /analytics/products-count:
    get:
      operationId: analytics_ApiOperation_8e0cd7
      tags:
      - analytics
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseAny'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '409':
          $ref: '#/components/responses/Error409'
        '422':
          $ref: '#/components/responses/Error422'
        '429':
          $ref: '#/components/responses/Error429'
        '500':
          $ref: '#/components/responses/Error500'
        '502':
          $ref: '#/components/responses/Error502'
      security:
      - BearerAuth: []
  /analytics/webhook:
    post:
      operationId: analytics_Public_96f864
      tags:
      - analytics
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseAny'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '409':
          $ref: '#/components/responses/Error409'
        '422':
          $ref: '#/components/responses/Error422'
        '429':
          $ref: '#/components/responses/Error429'
        '500':
          $ref: '#/components/responses/Error500'
        '502':
          $ref: '#/components/responses/Error502'
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
  /analytics/missing-responses:
    get:
      operationId: analytics_ApiOperation_560ced
      tags:
      - analytics
      parameters:
      - $ref: '#/components/parameters/CursorParam'
      - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseCursorPage'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '409':
          $ref: '#/components/responses/Error409'
        '422':
          $ref: '#/components/responses/Error422'
        '429':
          $ref: '#/components/responses/Error429'
        '500':
          $ref: '#/components/responses/Error500'
        '502':
          $ref: '#/components/responses/Error502'
      security:
      - BearerAuth: []
  /analytics/missing-responses/{id}/resolve:
    patch:
      operationId: analytics_ApiOperation_519149
      tags:
      - analytics
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseAny'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '409':
          $ref: '#/components/responses/Error409'
        '422':
          $ref: '#/components/responses/Error422'
        '429':
          $ref: '#/components/responses/Error429'
        '500':
          $ref: '#/components/responses/Error500'
        '502':
          $ref: '#/components/responses/Error502'
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
  /analytics/missing-responses/resolve:
    patch:
      operationId: analytics_ApiOperation_269e03
      tags:
      - analytics
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseAny'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '409':
          $ref: '#/components/responses/Error409'
        '422':
          $ref: '#/components/responses/Error422'
        '429':
          $ref: '#/components/responses/Error429'
        '500':
          $ref: '#/components/responses/Error500'
        '502':
          $ref: '#/components/responses/Error502'
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
  /analytics/missing-responses/{id}/add-to-knowledge:
    post:
      operationId: analytics_ApiOperation_99921c
      tags:
      - analytics
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseAny'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '409':
          $ref: '#/components/responses/Error409'
        '422':
          $ref: '#/components/responses/Error422'
        '429':
          $ref: '#/components/responses/Error429'
        '500':
          $ref: '#/components/responses/Error500'
        '502':
          $ref: '#/components/responses/Error502'
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
  /analytics/missing-responses/stats:
    get:
      operationId: analytics_ApiOperation_0f020a
      tags:
      - analytics
      parameters:
      - $ref: '#/components/parameters/CursorParam'
      - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseCursorPage'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '409':
          $ref: '#/components/responses/Error409'
        '422':
          $ref: '#/components/responses/Error422'
        '429':
          $ref: '#/components/responses/Error429'
        '500':
          $ref: '#/components/responses/Error500'
        '502':
          $ref: '#/components/responses/Error502'
      security:
      - BearerAuth: []
  /analytics/top-products:
    get:
      operationId: analytics_ApiOperation_eb4cfc
      tags:
      - analytics
      parameters:
      - $ref: '#/components/parameters/CursorParam'
      - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseCursorPage'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '409':
          $ref: '#/components/responses/Error409'
        '422':
          $ref: '#/components/responses/Error422'
        '429':
          $ref: '#/components/responses/Error429'
        '500':
          $ref: '#/components/responses/Error500'
        '502':
          $ref: '#/components/responses/Error502'
      security:
      - BearerAuth: []
  /analytics/webhook/kleem:
    post:
      operationId: analytics_Public_edccca
      tags:
      - analytics
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseAny'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '409':
          $ref: '#/components/responses/Error409'
        '422':
          $ref: '#/components/responses/Error422'
        '429':
          $ref: '#/components/responses/Error429'
        '500':
          $ref: '#/components/responses/Error500'
        '502':
          $ref: '#/components/responses/Error502'
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
  /auth/register:
    post:
      tags:
      - Authentication
      summary: Register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
      responses:
        '201':
          description: Register success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessOnlyResponse'
          headers:
            Set-Cookie:
              schema:
                type: string
              description: May include accessToken, refreshToken, and csrf-token cookies.
            X-CSRF-Token:
              schema:
                type: string
              description: Server returns X-CSRF-Token header mirroring the csrf-token
                cookie for double-submit CSRF.
        '400':
          description: Registration failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /auth/login:
    post:
      tags:
      - Authentication
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '200':
          description: Login success; sets cookies
          headers:
            Set-Cookie:
              schema:
                type: string
              description: May include accessToken, refreshToken, and csrf-token cookies.
            X-CSRF-Token:
              schema:
                type: string
              description: Server returns X-CSRF-Token header mirroring the csrf-token
                cookie for double-submit CSRF.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenPairResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /auth/resend-verification:
    post:
      tags:
      - Authentication
      summary: Resend verification email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendVerificationDto'
      responses:
        '200':
          description: Sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponseEnvelope'
          headers: {}
        '400':
          description: Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /auth/verify-email:
    post:
      tags:
      - Authentication
      summary: Verify email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailDto'
      responses:
        '200':
          description: Verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessOnlyResponse'
          headers: {}
        '400':
          description: Invalid code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /auth/forgot-password:
    post:
      tags:
      - Authentication
      summary: Request password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPasswordResetDto'
      responses:
        '200':
          description: If exists, email sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponseEnvelope'
          headers: {}
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /auth/reset-password/validate:
    get:
      tags:
      - Authentication
      summary: Validate reset token
      parameters:
      - in: query
        name: email
        required: true
        schema:
          type: string
          format: email
      - in: query
        name: token
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Validity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateResetResponseEnvelope'
          headers: {}
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /auth/reset-password:
    post:
      tags:
      - Authentication
      summary: Reset password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordDto'
      responses:
        '200':
          description: Password reset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponseEnvelope'
          headers: {}
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /auth/ensure-merchant:
    post:
      tags:
      - Authentication
      summary: Ensure merchant exists for user
      security:
      - bearer: []
      responses:
        '200':
          description: Returns new access token + user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessOnlyResponse'
          headers: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /auth/change-password:
    post:
      tags:
      - Authentication
      summary: Change password
      security:
      - bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordDto'
      responses:
        '200':
          description: Changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponseEnvelope'
          headers: {}
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /auth/refresh:
    post:
      tags:
      - Authentication
      summary: Refresh tokens (cookie or body)
      security:
      - csrf: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequestDto'
      responses:
        '200':
          description: Refreshed; sets cookies
          headers:
            Set-Cookie:
              schema:
                type: string
              description: May include accessToken, refreshToken, and csrf-token cookies.
            X-CSRF-Token:
              schema:
                type: string
              description: Server returns X-CSRF-Token header mirroring the csrf-token
                cookie for double-submit CSRF.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenPairResponse'
        '401':
          description: Invalid/absent refresh token or CSRF mismatch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /auth/logout:
    post:
      tags:
      - Authentication
      summary: Logout current session
      security:
      - bearer: []
      - csrf: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutRequestDto'
      responses:
        '200':
          description: Logged out; clears cookies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponseEnvelope'
          headers: {}
  /auth/logout-all:
    post:
      tags:
      - Authentication
      summary: Logout all sessions
      security:
      - bearer: []
      - csrf: []
      responses:
        '200':
          description: Logged out from all sessions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponseEnvelope'
          headers: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /catalog/{merchantId}/sync:
    post:
      operationId: الكتالوج_ApiOperation_8a2b7e
      tags:
      - الكتالوج
      parameters:
      - name: merchantId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/catalog.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/catalog.generated_Error400'
        '401':
          $ref: '#/components/responses/catalog.generated_Error401'
        '403':
          $ref: '#/components/responses/catalog.generated_Error403'
        '404':
          $ref: '#/components/responses/catalog.generated_Error404'
        '409':
          $ref: '#/components/responses/catalog.generated_Error409'
        '422':
          $ref: '#/components/responses/catalog.generated_Error422'
        '429':
          $ref: '#/components/responses/catalog.generated_Error429'
        '500':
          $ref: '#/components/responses/catalog.generated_Error500'
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
  /catalog/{merchantId}/status:
    get:
      operationId: الكتالوج_ApiOperation_4a853c
      tags:
      - الكتالوج
      parameters:
      - name: merchantId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/catalog.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/catalog.generated_Error400'
        '401':
          $ref: '#/components/responses/catalog.generated_Error401'
        '403':
          $ref: '#/components/responses/catalog.generated_Error403'
        '404':
          $ref: '#/components/responses/catalog.generated_Error404'
        '409':
          $ref: '#/components/responses/catalog.generated_Error409'
        '422':
          $ref: '#/components/responses/catalog.generated_Error422'
        '429':
          $ref: '#/components/responses/catalog.generated_Error429'
        '500':
          $ref: '#/components/responses/catalog.generated_Error500'
      security:
      - BearerAuth: []
  /catalog/{merchantId}/stats:
    get:
      operationId: الكتالوج_ApiOperation_9d341e
      tags:
      - الكتالوج
      parameters:
      - name: merchantId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/catalog.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/catalog.generated_Error400'
        '401':
          $ref: '#/components/responses/catalog.generated_Error401'
        '403':
          $ref: '#/components/responses/catalog.generated_Error403'
        '404':
          $ref: '#/components/responses/catalog.generated_Error404'
        '409':
          $ref: '#/components/responses/catalog.generated_Error409'
        '422':
          $ref: '#/components/responses/catalog.generated_Error422'
        '429':
          $ref: '#/components/responses/catalog.generated_Error429'
        '500':
          $ref: '#/components/responses/catalog.generated_Error500'
      security:
      - BearerAuth: []
  /categories:
    post:
      security:
      - bearer: []
      summary: Create a category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/categories.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Category'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
    get:
      security:
      - bearer: []
      summary: List categories by merchant
      parameters:
      - in: query
        name: merchantId
        required: true
        schema:
          type: string
      - in: query
        name: tree
        required: false
        schema:
          type: boolean
        description: If true, returns hierarchical tree instead of flat list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/categories.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      oneOf:
                      - type: array
                        items:
                          $ref: '#/components/schemas/Category'
                      - $ref: '#/components/schemas/TreeCategory'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
  /categories/{id}:
    parameters:
    - in: path
      name: id
      required: true
      schema:
        type: string
    get:
      security:
      - bearer: []
      summary: Get a category by id
      parameters:
      - in: query
        name: merchantId
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/categories.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Category'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
    delete:
      security:
      - bearer: []
      summary: Delete a category
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - in: query
        name: merchantId
        required: true
        schema:
          type: string
      - in: query
        name: cascade
        required: false
        schema:
          type: boolean
        description: If true, delete subtree
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/categories.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        message:
                          type: string
                      required:
                      - message
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
    put:
      security:
      - bearer: []
      summary: Update a category
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - in: query
        name: merchantId
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/categories.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Category'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
  /categories/{id}/breadcrumbs:
    parameters:
    - in: path
      name: id
      required: true
      schema:
        type: string
    get:
      security:
      - bearer: []
      summary: Get breadcrumbs for a category
      parameters:
      - in: query
        name: merchantId
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/categories.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/BreadcrumbItem'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
  /categories/{id}/subtree:
    parameters:
    - in: path
      name: id
      required: true
      schema:
        type: string
    get:
      security:
      - bearer: []
      summary: Get category subtree (children recursively)
      parameters:
      - in: query
        name: merchantId
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/categories.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/TreeCategory'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
  /categories/{id}/move:
    parameters:
    - in: path
      name: id
      required: true
      schema:
        type: string
    patch:
      security:
      - bearer: []
      summary: Move/reorder a category
      parameters:
      - in: query
        name: merchantId
        required: true
        schema:
          type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveCategoryDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/categories.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Category'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
  /categories/{id}/image:
    parameters:
    - in: path
      name: id
      required: true
      schema:
        type: string
    post:
      security:
      - bearer: []
      summary: Upload category image
      parameters:
      - in: query
        name: merchantId
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
              - file
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/categories.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/UploadImageResult'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories.fixed_ApiError'
  /channels:
    get:
      security:
      - bearer: []
      summary: List channels
      parameters:
      - in: query
        name: merchantId
        schema:
          type: string
      - in: query
        name: provider
        schema:
          $ref: '#/components/schemas/ChannelProvider'
      - in: query
        name: page
        schema:
          type: integer
          minimum: 1
          default: 1
      - in: query
        name: pageSize
        schema:
          type: integer
          minimum: 1
          default: 20
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/channels.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/ChannelsList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channels.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channels.fixed_ApiError'
    post:
      security:
      - bearer: []
      summary: Create channel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChannelDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/channels.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Channel'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channels.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channels.fixed_ApiError'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channels.fixed_ApiError'
  /channels/{id}:
    parameters:
    - in: path
      name: id
      required: true
      schema:
        type: string
    get:
      security:
      - bearer: []
      summary: Get a channel
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/channels.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Channel'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channels.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channels.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channels.fixed_ApiError'
    patch:
      security:
      - bearer: []
      summary: Update a channel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateChannelDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/channels.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Channel'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channels.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channels.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channels.fixed_ApiError'
    delete:
      security:
      - bearer: []
      summary: Delete a channel
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/channels.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/channels.fixed_MessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channels.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channels.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channels.fixed_ApiError'
  /channels/{id}/connect:
    parameters:
    - in: path
      name: id
      required: true
      schema:
        type: string
    post:
      security:
      - bearer: []
      summary: Enable or disable channel connection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectActionDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/channels.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/channels.fixed_MessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channels.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channels.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channels.fixed_ApiError'
  /channels/{id}/status:
    parameters:
    - in: path
      name: id
      required: true
      schema:
        type: string
    get:
      security:
      - bearer: []
      summary: Get channel status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/channels.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/ChannelStatus'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channels.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channels.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channels.fixed_ApiError'
  /channels/{id}/send:
    parameters:
    - in: path
      name: id
      required: true
      schema:
        type: string
    post:
      security:
      - bearer: []
      summary: Send a message via channel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/channels.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/SendAck'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channels.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channels.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channels.fixed_ApiError'
  /channels/webhook/{provider}:
    parameters:
    - in: path
      name: provider
      required: true
      schema:
        $ref: '#/components/schemas/ChannelProvider'
    post:
      summary: Inbound webhook for provider
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/channels.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/channels.fixed_MessageResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channels.fixed_ApiError'
  /merchants/{merchantId}/widget-settings:
    parameters:
    - in: path
      name: merchantId
      required: true
      schema:
        type: string
    get:
      security:
      - bearer: []
      summary: Get chat widget settings for a merchant
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/chat.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/ChatWidgetSettings'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
    put:
      security:
      - bearer: []
      summary: Update chat widget settings for a merchant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWidgetSettingsDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/chat.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/ChatWidgetSettings'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
  /merchants/{merchantId}/widget-settings/embed-settings:
    parameters:
    - in: path
      name: merchantId
      required: true
      schema:
        type: string
    get:
      security:
      - bearer: []
      summary: Get embed settings (theme/position/embedMode)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/chat.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/EmbedSettingsDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
    put:
      security:
      - bearer: []
      summary: Update embed settings (theme/position/embedMode)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmbedSettingsDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/chat.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/EmbedSettingsDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
  /merchants/{merchantId}/widget-settings/share-url:
    parameters:
    - in: path
      name: merchantId
      required: true
      schema:
        type: string
    get:
      security:
      - bearer: []
      summary: Generate share URL for chat widget
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/chat.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/ShareUrlResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
  /merchants/{merchantId}/widget-settings/slug:
    parameters:
    - in: path
      name: merchantId
      required: true
      schema:
        type: string
    post:
      summary: Create a unique slug for the chat widget (Public)
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/chat.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/SlugResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
  /public/chat-widget/{widgetSlug}:
    parameters:
    - in: path
      name: widgetSlug
      required: true
      schema:
        type: string
    get:
      summary: 'Public: get widget settings by slug'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/chat.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/PublicWidgetSettingsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
  /public/chat-widget/{widgetSlug}/status:
    parameters:
    - in: path
      name: widgetSlug
      required: true
      schema:
        type: string
    get:
      summary: 'Public: get widget status (queue/assignment)'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/chat.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/PublicWidgetStatusResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
  /public/chat-widget/{widgetSlug}/session:
    parameters:
    - in: path
      name: widgetSlug
      required: true
      schema:
        type: string
    post:
      summary: 'Public: create a chat session'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSessionDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/chat.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/CreateSessionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat.fixed_ApiError'
  /merchants/{merchantId}/documents:
    parameters:
    - in: path
      name: merchantId
      required: true
      schema:
        type: string
    post:
      security:
      - bearer: []
      summary: Upload a document for merchant
      description: 'Consumes multipart/form-data with a single file. Allowed MIME
        types: pdf, doc, docx, jpeg, png. Max size 10 MB.'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
              - file
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/documents.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Document'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documents.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documents.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documents.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documents.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documents.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documents.fixed_ApiError'
    get:
      security:
      - bearer: []
      summary: List documents for merchant (paginated)
      parameters:
      - in: query
        name: page
        required: false
        schema:
          type: integer
          minimum: 1
          default: 1
      - in: query
        name: limit
        required: false
        schema:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/documents.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/PaginatedDocuments'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documents.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documents.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documents.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documents.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documents.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documents.fixed_ApiError'
  /merchants/{merchantId}/documents/{docId}:
    parameters:
    - in: path
      name: merchantId
      required: true
      schema:
        type: string
    - in: path
      name: docId
      required: true
      schema:
        type: string
    get:
      security:
      - bearer: []
      summary: Get document (302) — redirect to presigned download URL
      responses:
        '302':
          description: Redirect to file URL
          headers:
            Location:
              schema:
                type: string
              description: Presigned URL
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documents.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documents.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documents.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documents.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documents.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documents.fixed_ApiError'
    delete:
      security:
      - bearer: []
      summary: Delete a document
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documents.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documents.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documents.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documents.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documents.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documents.fixed_ApiError'
  /merchants/{merchantId}/faqs:
    parameters:
    - in: path
      name: merchantId
      required: true
      schema:
        type: string
    post:
      security:
      - bearer: []
      summary: إضافة مجموعة من الأسئلة الشائعة (queue)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateFaqItem'
      responses:
        '201':
          description: Queued
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/faq.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/BatchResult'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
    get:
      security:
      - bearer: []
      summary: قائمة الأسئلة الشائعة
      parameters:
      - in: query
        name: includeDeleted
        required: false
        schema:
          type: string
          enum:
          - 'true'
          - 'false'
          default: 'false'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/faq.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/FaqItem'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
    delete:
      security:
      - bearer: []
      summary: حذف كل الأسئلة الشائعة لهذا التاجر (soft/hard)
      parameters:
      - in: query
        name: all
        required: true
        schema:
          type: string
          enum:
          - 'true'
        example: 'true'
      - in: query
        name: hard
        required: false
        schema:
          type: string
          enum:
          - 'true'
          - 'false'
        example: 'false'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/faq.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      oneOf:
                      - $ref: '#/components/schemas/DeleteAllSoft'
                      - $ref: '#/components/schemas/DeleteAllHard'
                      - $ref: '#/components/schemas/SimpleMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
  /merchants/{merchantId}/faqs/status:
    parameters:
    - in: path
      name: merchantId
      required: true
      schema:
        type: string
    get:
      security:
      - bearer: []
      summary: حالة التدريب/الفهرسة للأسئلة الشائعة
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/faq.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/FaqStatusCounts'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
  /merchants/{merchantId}/faqs/{faqId}:
    parameters:
    - in: path
      name: merchantId
      required: true
      schema:
        type: string
    - in: path
      name: faqId
      required: true
      schema:
        type: string
    patch:
      security:
      - bearer: []
      summary: تحديث سؤال/جواب وإعادة الفهرسة
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFaqDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/faq.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/UpdateResult'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
    delete:
      security:
      - bearer: []
      summary: حذف سؤال شائع (soft/hard)
      parameters:
      - in: query
        name: hard
        required: false
        schema:
          type: string
          enum:
          - 'true'
          - 'false'
        example: 'false'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/faq.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      oneOf:
                      - $ref: '#/components/schemas/SoftDeleteResult'
                      - $ref: '#/components/schemas/HardDeleteResult'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faq.fixed_ApiError'
  /instructions:
    post:
      security:
      - bearer: []
      summary: إنشاء توجيه جديد
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInstructionDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/instructions.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/InstructionItem'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
    get:
      security:
      - bearer: []
      summary: الحصول على قائمة بالتوجيهات مع خيارات التصفية
      parameters:
      - in: query
        name: merchantId
        required: false
        schema:
          type: string
      - in: query
        name: active
        required: false
        schema:
          type: string
          enum:
          - 'true'
          - 'false'
      - in: query
        name: limit
        required: false
        schema:
          type: integer
          minimum: 1
          maximum: 100
          default: 30
      - in: query
        name: page
        required: false
        schema:
          type: integer
          minimum: 1
          default: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/instructions.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/InstructionItem'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
  /instructions/{id}:
    parameters:
    - in: path
      name: id
      required: true
      schema:
        type: string
    patch:
      security:
      - bearer: []
      summary: تحديث توجيه موجود
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInstructionDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/instructions.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/InstructionItem'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
    delete:
      security:
      - bearer: []
      summary: حذف توجيه
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/instructions.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/InstructionItem'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
  /instructions/{id}/deactivate:
    parameters:
    - in: path
      name: id
      required: true
      schema:
        type: string
    patch:
      security:
      - bearer: []
      summary: إلغاء تفعيل توجيه
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/instructions.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/InstructionItem'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
  /instructions/{id}/activate:
    parameters:
    - in: path
      name: id
      required: true
      schema:
        type: string
    patch:
      security:
      - bearer: []
      summary: تفعيل توجيه
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/instructions.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/InstructionItem'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
  /instructions/active:
    get:
      security:
      - bearer: []
      summary: الحصول على جميع التوجيهات النشطة (للبوت)
      parameters:
      - in: query
        name: merchantId
        required: false
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/instructions.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/InstructionItem'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
  /instructions/suggestions:
    get:
      security:
      - bearer: []
      summary: اقتراح توجيهات تلقائيًا من الردود السلبية (بدون حفظ)
      parameters:
      - in: query
        name: limit
        required: false
        schema:
          type: integer
          minimum: 1
          maximum: 100
          default: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/instructions.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/SuggestionsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
  /instructions/auto/generate:
    post:
      security:
      - bearer: []
      summary: توليد وحفظ توجيهات من ردود سلبية
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateFromBadRepliesRequest'
      responses:
        '201':
          description: Queued
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/instructions.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/GenerateFromBadRepliesResult'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructions.fixed_ApiError'
  /integrations/status:
    get:
      operationId: التكاملات_ApiOperation_272b4d
      tags:
      - التكاملات
      parameters:
      - $ref: '#/components/parameters/integrations.generated_CursorParam'
      - $ref: '#/components/parameters/integrations.generated_LimitParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/integrations.generated_ApiResponseCursorPage'
        '400':
          $ref: '#/components/responses/integrations.generated_Error400'
        '401':
          $ref: '#/components/responses/integrations.generated_Error401'
        '403':
          $ref: '#/components/responses/integrations.generated_Error403'
        '404':
          $ref: '#/components/responses/integrations.generated_Error404'
        '409':
          $ref: '#/components/responses/integrations.generated_Error409'
        '422':
          $ref: '#/components/responses/integrations.generated_Error422'
        '429':
          $ref: '#/components/responses/integrations.generated_Error429'
        '500':
          $ref: '#/components/responses/integrations.generated_Error500'
        '502':
          $ref: '#/components/responses/integrations.generated_Error502'
      security:
      - BearerAuth: []
  /integrations/salla/connect:
    get:
      operationId: تكامل_سلة_ApiOperation_ec88b8
      tags:
      - تكامل سلة
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/integrations.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/integrations.generated_Error400'
        '401':
          $ref: '#/components/responses/integrations.generated_Error401'
        '403':
          $ref: '#/components/responses/integrations.generated_Error403'
        '404':
          $ref: '#/components/responses/integrations.generated_Error404'
        '409':
          $ref: '#/components/responses/integrations.generated_Error409'
        '422':
          $ref: '#/components/responses/integrations.generated_Error422'
        '429':
          $ref: '#/components/responses/integrations.generated_Error429'
        '500':
          $ref: '#/components/responses/integrations.generated_Error500'
        '502':
          $ref: '#/components/responses/integrations.generated_Error502'
      security:
      - BearerAuth: []
  /integrations/salla/callback:
    get:
      operationId: تكامل_سلة_ApiOperation_ece682
      tags:
      - تكامل سلة
      parameters:
      - name: code
        in: query
        required: false
        schema:
          type: string
      - name: state
        in: query
        required: false
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/integrations.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/integrations.generated_Error400'
        '401':
          $ref: '#/components/responses/integrations.generated_Error401'
        '403':
          $ref: '#/components/responses/integrations.generated_Error403'
        '404':
          $ref: '#/components/responses/integrations.generated_Error404'
        '409':
          $ref: '#/components/responses/integrations.generated_Error409'
        '422':
          $ref: '#/components/responses/integrations.generated_Error422'
        '429':
          $ref: '#/components/responses/integrations.generated_Error429'
        '500':
          $ref: '#/components/responses/integrations.generated_Error500'
        '502':
          $ref: '#/components/responses/integrations.generated_Error502'
      security:
      - BearerAuth: []
  /integrations/salla/webhook:
    post:
      operationId: تكامل_سلة_HttpCode_b8b427
      tags:
      - تكامل سلة
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/integrations.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/integrations.generated_Error400'
        '401':
          $ref: '#/components/responses/integrations.generated_Error401'
        '403':
          $ref: '#/components/responses/integrations.generated_Error403'
        '404':
          $ref: '#/components/responses/integrations.generated_Error404'
        '409':
          $ref: '#/components/responses/integrations.generated_Error409'
        '422':
          $ref: '#/components/responses/integrations.generated_Error422'
        '429':
          $ref: '#/components/responses/integrations.generated_Error429'
        '500':
          $ref: '#/components/responses/integrations.generated_Error500'
        '502':
          $ref: '#/components/responses/integrations.generated_Error502'
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
  /integrations/zid/connect:
    get:
      operationId: تكامل_زد_connect_10afea
      tags:
      - تكامل زد
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/integrations.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/integrations.generated_Error400'
        '401':
          $ref: '#/components/responses/integrations.generated_Error401'
        '403':
          $ref: '#/components/responses/integrations.generated_Error403'
        '404':
          $ref: '#/components/responses/integrations.generated_Error404'
        '409':
          $ref: '#/components/responses/integrations.generated_Error409'
        '422':
          $ref: '#/components/responses/integrations.generated_Error422'
        '429':
          $ref: '#/components/responses/integrations.generated_Error429'
        '500':
          $ref: '#/components/responses/integrations.generated_Error500'
        '502':
          $ref: '#/components/responses/integrations.generated_Error502'
      security:
      - BearerAuth: []
  /integrations/zid/callback:
    get:
      operationId: تكامل_زد_callback_cb7db4
      tags:
      - تكامل زد
      parameters:
      - name: code
        in: query
        required: false
        schema:
          type: string
      - name: state
        in: query
        required: false
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/integrations.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/integrations.generated_Error400'
        '401':
          $ref: '#/components/responses/integrations.generated_Error401'
        '403':
          $ref: '#/components/responses/integrations.generated_Error403'
        '404':
          $ref: '#/components/responses/integrations.generated_Error404'
        '409':
          $ref: '#/components/responses/integrations.generated_Error409'
        '422':
          $ref: '#/components/responses/integrations.generated_Error422'
        '429':
          $ref: '#/components/responses/integrations.generated_Error429'
        '500':
          $ref: '#/components/responses/integrations.generated_Error500'
        '502':
          $ref: '#/components/responses/integrations.generated_Error502'
      security:
      - BearerAuth: []
  /integrations/zid/webhook:
    post:
      operationId: تكامل_زد_HttpCode_d1cb9e
      tags:
      - تكامل زد
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/integrations.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/integrations.generated_Error400'
        '401':
          $ref: '#/components/responses/integrations.generated_Error401'
        '403':
          $ref: '#/components/responses/integrations.generated_Error403'
        '404':
          $ref: '#/components/responses/integrations.generated_Error404'
        '409':
          $ref: '#/components/responses/integrations.generated_Error409'
        '422':
          $ref: '#/components/responses/integrations.generated_Error422'
        '429':
          $ref: '#/components/responses/integrations.generated_Error429'
        '500':
          $ref: '#/components/responses/integrations.generated_Error500'
        '502':
          $ref: '#/components/responses/integrations.generated_Error502'
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
  /merchants/{merchantId}/knowledge/urls:
    parameters:
    - in: path
      name: merchantId
      required: true
      schema:
        type: string
    post:
      security:
      - bearer: []
      summary: Add knowledge source URLs (queue for crawling)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddUrlsRequest'
      responses:
        '201':
          description: Queued
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/knowledge.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AddUrlsResult'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/knowledge.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/knowledge.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/knowledge.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/knowledge.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/knowledge.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/knowledge.fixed_ApiError'
    get:
      security:
      - bearer: []
      summary: List knowledge URLs for a merchant
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/knowledge.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/SourceUrlListItem'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/knowledge.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/knowledge.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/knowledge.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/knowledge.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/knowledge.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/knowledge.fixed_ApiError'
    delete:
      security:
      - bearer: []
      summary: Delete by `url` or delete all (`all=true`)
      parameters:
      - in: path
        name: merchantId
        required: true
        schema:
          type: string
      - in: query
        name: url
        required: false
        schema:
          type: string
          format: uri
      - in: query
        name: all
        required: false
        schema:
          type: string
        description: إذا كانت 'true' سيتم حذف جميع الروابط والمتجهات
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/knowledge.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      oneOf:
                      - $ref: '#/components/schemas/DeleteResult'
                      - $ref: '#/components/schemas/DeleteAllResult'
                      - $ref: '#/components/schemas/knowledge.fixed_SimpleMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/knowledge.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/knowledge.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/knowledge.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/knowledge.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/knowledge.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/knowledge.fixed_ApiError'
  /merchants/{merchantId}/knowledge/urls/status:
    parameters:
    - in: path
      name: merchantId
      required: true
      schema:
        type: string
    get:
      security:
      - bearer: []
      summary: Knowledge URLs processing status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/knowledge.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/UrlsStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/knowledge.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/knowledge.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/knowledge.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/knowledge.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/knowledge.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/knowledge.fixed_ApiError'
  /merchants/{merchantId}/knowledge/urls/{id}:
    parameters:
    - in: path
      name: merchantId
      required: true
      schema:
        type: string
    - in: path
      name: id
      required: true
      schema:
        type: string
      description: معرف السجل في قاعدة البيانات
    delete:
      security:
      - bearer: []
      summary: Delete a single knowledge URL by id (and related vectors)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/knowledge.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/DeleteResult'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/knowledge.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/knowledge.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/knowledge.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/knowledge.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/knowledge.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/knowledge.fixed_ApiError'
  /merchants/{merchantId}/leads:
    parameters:
    - in: path
      name: merchantId
      required: true
      schema:
        type: string
    post:
      summary: Create a new lead (Public)
      description: This endpoint is marked @Public() in code and does not require
        JWT.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLeadDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/leads.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Lead'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/leads.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/leads.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/leads.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/leads.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/leads.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/leads.fixed_ApiError'
    get:
      security:
      - bearer: []
      summary: List leads for a merchant (Protected)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/leads.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/LeadList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/leads.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/leads.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/leads.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/leads.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/leads.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/leads.fixed_ApiError'
  /storefront/merchant/{merchantId}/leads:
    parameters:
    - in: path
      name: merchantId
      required: true
      schema:
        type: string
    post:
      summary: 'Public: create a lead via storefront route'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLeadDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/leads.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Lead'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/leads.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/leads.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/leads.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/leads.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/leads.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/leads.fixed_ApiError'
  /media/upload:
    post:
      security:
      - bearer: []
      summary: Upload a media file and extract text
      description: Consumes multipart/form-data. Accepts binary `file` plus optional
        fields and MediaHandlerDto properties.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The file to upload.
                type:
                  $ref: '#/components/schemas/MediaType'
                sessionId:
                  type: string
                channel:
                  type: string
                  enum:
                  - whatsapp
                  - telegram
                  - webchat
                  - other
                mimeType:
                  type: string
              required:
              - file
              - type
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/media.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/MediaHandleResult'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/media.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/media.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/media.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/media.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/media.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/media.fixed_ApiError'
  /media/file/{id}:
    get:
      summary: Serve a stored media file by id (public)
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Binary file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/media.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/media.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/media.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/media.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/media.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/media.fixed_ApiError'
  /merchants/check-public-slug:
    get:
      tags:
      - Merchants
      summary: GET /merchants/check-public-slug
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SlugAvailabilityEnvelope'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
      parameters:
      - in: query
        name: slug
        required: false
        schema:
          type: string
  /merchants/{id}:
    get:
      tags:
      - Merchants
      summary: GET /merchants/:id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantEnvelope'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
      security:
      - bearer: []
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    put:
      tags:
      - Merchants
      summary: PUT /merchants/:id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantEnvelope'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      security:
      - bearer: []
    delete:
      tags:
      - Merchants
      summary: DELETE /merchants/:id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageEnvelope'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      security:
      - bearer: []
  /merchants:
    get:
      tags:
      - Merchants
      summary: GET /merchants
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantsListEnvelope'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
      security:
      - bearer: []
    post:
      tags:
      - Merchants
      summary: POST /merchants
      responses:
        '200':
          description: OK
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantEnvelope'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
      parameters:
      - in: query
        name: slug
        required: false
        schema:
          type: string
      security:
      - bearer: []
  /merchants/{id}/checklist:
    get:
      tags:
      - Merchants
      summary: GET /merchants/:id/checklist
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChecklistEnvelope'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      security:
      - bearer: []
  /merchants/prompt/advanced-template:
    get:
      tags:
      - Merchants
      summary: GET /merchants/prompt/advanced-template
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedTemplateEnvelope'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      security:
      - bearer: []
  /merchants/{id}/subscription-status:
    get:
      tags:
      - Merchants
      summary: GET /merchants/:id/subscription-status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionStatusEnvelope'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      security:
      - bearer: []
  /merchants/{id}/ai/store-context:
    get:
      tags:
      - Merchants
      summary: GET /merchants/:id/ai/store-context
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AiStoreContextEnvelope'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      security:
      - bearer: []
  /merchants/{id}/purge:
    post:
      tags:
      - Merchants
      summary: POST /merchants/:id/purge
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageEnvelope'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
      security:
      - bearer: []
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
  /merchants/{id}/logo:
    post:
      tags:
      - Merchants
      summary: POST /merchants/:id/logo
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageEnvelope'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      security:
      - bearer: []
  /merchants/{id}/checklist/{itemKey}/skip:
    post:
      tags:
      - Merchants
      summary: POST /merchants/:id/checklist/:itemKey/skip
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageEnvelope'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - in: path
        name: itemKey
        required: true
        schema:
          type: string
      security:
      - bearer: []
  /merchants/{id}/workflow/ensure:
    post:
      tags:
      - Merchants
      summary: POST /merchants/:id/workflow/ensure
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageEnvelope'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      security:
      - bearer: []
  /merchants/{id}/soft-delete:
    put:
      tags:
      - Merchants
      summary: PUT /merchants/:id/soft-delete
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageEnvelope'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      security:
      - bearer: []
  /merchants/{id}/restore:
    put:
      tags:
      - Merchants
      summary: PUT /merchants/:id/restore
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageEnvelope'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      security:
      - bearer: []
  /merchants/{id}/onboarding/basic:
    patch:
      tags:
      - Merchants
      summary: PATCH /merchants/:id/onboarding/basic
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardingEnvelope'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      security:
      - bearer: []
  /merchants/{id}/product-source:
    patch:
      tags:
      - Merchants
      summary: PATCH /merchants/:id/product-source
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageEnvelope'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      security:
      - bearer: []
  /merchants/{id}/prompt/quick-config:
    get:
      tags:
      - MerchantPrompt
      summary: GET /merchants/:id/prompt/quick-config
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuickConfigEnvelope'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      security:
      - bearer: []
    patch:
      tags:
      - MerchantPrompt
      summary: PATCH /merchants/:id/prompt/quick-config
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuickConfigEnvelope'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      security:
      - bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MerchantPromptQuickConfig'
  /merchants/{id}/prompt/advanced-template:
    get:
      tags:
      - MerchantPrompt
      summary: GET /merchants/:id/prompt/advanced-template
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedTemplateEnvelope'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      security:
      - bearer: []
    post:
      tags:
      - MerchantPrompt
      summary: POST /merchants/:id/prompt/advanced-template
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageEnvelope'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      security:
      - bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MerchantPromptAdvancedTemplate'
  /merchants/{id}/prompt/advanced-versions:
    get:
      tags:
      - MerchantPrompt
      summary: GET /merchants/:id/prompt/advanced-versions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedVersionsEnvelope'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      security:
      - bearer: []
  /merchants/{id}/prompt/final-prompt:
    get:
      tags:
      - MerchantPrompt
      summary: GET /merchants/:id/prompt/final-prompt
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinalPromptEnvelope'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      security:
      - bearer: []
  /merchants/{id}/prompt/advanced-versions/{index}/revert:
    post:
      tags:
      - MerchantPrompt
      summary: POST /merchants/:id/prompt/advanced-versions/:index/revert
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageEnvelope'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - in: path
        name: index
        required: true
        schema:
          type: integer
      security:
      - bearer: []
  /merchants/{id}/prompt/preview:
    post:
      tags:
      - MerchantPrompt
      summary: POST /merchants/:id/prompt/preview
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreviewEnvelope'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchants.fixed_ApiError'
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      security:
      - bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                input:
                  type: string
  /messages:
    post:
      security:
      - bearer: []
      summary: Create or append messages to a session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessageDto'
      responses:
        '201':
          description: Created/Updated session
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/messaging.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/MessageSession'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messaging.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messaging.fixed_ApiError'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messaging.fixed_ApiError'
    get:
      security:
      - bearer: []
      summary: List sessions
      parameters:
      - in: query
        name: merchantId
        schema:
          type: string
      - in: query
        name: channel
        schema:
          type: string
          enum:
          - whatsapp
          - telegram
          - webchat
      - in: query
        name: page
        schema:
          type: integer
          minimum: 1
          default: 1
      - in: query
        name: pageSize
        schema:
          type: integer
          minimum: 1
          default: 20
      - in: query
        name: search
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/messaging.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/SessionsList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messaging.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messaging.fixed_ApiError'
  /messages/session/{sessionId}/handover:
    parameters:
    - in: path
      name: sessionId
      required: true
      schema:
        type: string
    patch:
      security:
      - bearer: []
      summary: Set handover to human agent for a session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                handoverToAgent:
                  type: boolean
              required:
              - handoverToAgent
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/messaging.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        success:
                          type: boolean
                      required:
                      - success
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messaging.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messaging.fixed_ApiError'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messaging.fixed_ApiError'
  /messages/public/{widgetSlug}/webchat/{sessionId}:
    parameters:
    - in: path
      name: widgetSlug
      required: true
      schema:
        type: string
    - in: path
      name: sessionId
      required: true
      schema:
        type: string
    get:
      summary: 'Public: get a webchat session by widget slug and sessionId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/messaging.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/MessageSession'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messaging.fixed_ApiError'
  /messages/session/{sessionId}:
    parameters:
    - in: path
      name: sessionId
      required: true
      schema:
        type: string
    get:
      security:
      - bearer: []
      summary: Get a session by sessionId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/messaging.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/MessageSession'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messaging.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messaging.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messaging.fixed_ApiError'
  /messages/{id}:
    parameters:
    - in: path
      name: id
      required: true
      schema:
        type: string
    get:
      security:
      - bearer: []
      summary: Get a session by DB id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/messaging.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/MessageSession'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messaging.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messaging.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messaging.fixed_ApiError'
    patch:
      security:
      - bearer: []
      summary: Update a session by DB id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMessageDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/messaging.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/MessageSession'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messaging.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messaging.fixed_ApiError'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messaging.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messaging.fixed_ApiError'
    delete:
      security:
      - bearer: []
      summary: Delete a session by DB id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/messaging.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/DeletedAck'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messaging.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messaging.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messaging.fixed_ApiError'
  /messages/session/{sessionId}/messages/{messageId}/rate:
    parameters:
    - in: path
      name: sessionId
      required: true
      schema:
        type: string
    - in: path
      name: messageId
      required: true
      schema:
        type: string
    patch:
      security:
      - bearer: []
      summary: Rate a single message in a session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RateMessageDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/messaging.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/MessageSession'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messaging.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messaging.fixed_ApiError'
        '404':
          description: Message or session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messaging.fixed_ApiError'
  /messages/generate-instructions-from-bad-replies:
    post:
      security:
      - bearer: []
      summary: Generate instructions based on negative-rated replies
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/messaging.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/GenerateInstructionsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messaging.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messaging.fixed_ApiError'
  /messages/bad-bot-instructions:
    get:
      security:
      - bearer: []
      summary: List bad-bot instructions (hints to improve bot)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/messaging.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/BadBotInstructions'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messaging.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messaging.fixed_ApiError'
  /messages/{sessionId}/ratings:
    parameters:
    - in: path
      name: sessionId
      required: true
      schema:
        type: string
    get:
      security:
      - bearer: []
      summary: List rated messages within a session
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/messaging.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/SingleMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messaging.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messaging.fixed_ApiError'
        '404':
          description: Session not found or no ratings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messaging.fixed_ApiError'
  /ai-agent-68a3addee395b1a94f9fcf87:
    post:
      operationId: n8n_wf-68a3addee395b1a94f9fcf87_post_08da18
      tags:
      - wf-68a3addee395b1a94f9fcf87
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/n8n.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/n8n.generated_Error400'
        '401':
          $ref: '#/components/responses/n8n.generated_Error401'
        '403':
          $ref: '#/components/responses/n8n.generated_Error403'
        '404':
          $ref: '#/components/responses/n8n.generated_Error404'
        '409':
          $ref: '#/components/responses/n8n.generated_Error409'
        '422':
          $ref: '#/components/responses/n8n.generated_Error422'
        '429':
          $ref: '#/components/responses/n8n.generated_Error429'
        '500':
          $ref: '#/components/responses/n8n.generated_Error500'
        '502':
          $ref: '#/components/responses/n8n.generated_Error502'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
  /notifications/me:
    get:
      tags:
      - الإشعارات
      summary: GET /notifications/me
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notifications.updated_ApiResponseCursorPage'
        '400':
          $ref: '#/components/responses/notifications.updated_Error400'
        '401':
          $ref: '#/components/responses/notifications.updated_Error401'
        '403':
          $ref: '#/components/responses/notifications.updated_Error403'
        '404':
          $ref: '#/components/responses/notifications.updated_Error404'
        '409':
          $ref: '#/components/responses/notifications.updated_Error409'
        '422':
          $ref: '#/components/responses/notifications.updated_Error422'
        '429':
          $ref: '#/components/responses/notifications.updated_Error429'
        '500':
          $ref: '#/components/responses/notifications.updated_Error500'
        '502':
          $ref: '#/components/responses/notifications.updated_Error502'
      parameters:
      - in: query
        name: q
        required: false
        schema:
          type: string
      - $ref: '#/components/parameters/notifications.updated_CursorParam'
      - $ref: '#/components/parameters/notifications.updated_LimitParam'
      security:
      - bearer: []
  /notifications/test:
    post:
      tags:
      - الإشعارات
      summary: POST /notifications/test
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notifications.updated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/notifications.updated_Error400'
        '401':
          $ref: '#/components/responses/notifications.updated_Error401'
        '403':
          $ref: '#/components/responses/notifications.updated_Error403'
        '404':
          $ref: '#/components/responses/notifications.updated_Error404'
        '409':
          $ref: '#/components/responses/notifications.updated_Error409'
        '422':
          $ref: '#/components/responses/notifications.updated_Error422'
        '429':
          $ref: '#/components/responses/notifications.updated_Error429'
        '500':
          $ref: '#/components/responses/notifications.updated_Error500'
        '502':
          $ref: '#/components/responses/notifications.updated_Error502'
      security:
      - bearer: []
      parameters: []
  /notifications/{id}/read:
    patch:
      tags:
      - الإشعارات
      summary: PATCH /notifications/:id/read
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notifications.updated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/notifications.updated_Error400'
        '401':
          $ref: '#/components/responses/notifications.updated_Error401'
        '403':
          $ref: '#/components/responses/notifications.updated_Error403'
        '404':
          $ref: '#/components/responses/notifications.updated_Error404'
        '409':
          $ref: '#/components/responses/notifications.updated_Error409'
        '422':
          $ref: '#/components/responses/notifications.updated_Error422'
        '429':
          $ref: '#/components/responses/notifications.updated_Error429'
        '500':
          $ref: '#/components/responses/notifications.updated_Error500'
        '502':
          $ref: '#/components/responses/notifications.updated_Error502'
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      security:
      - bearer: []
  /notifications/read-all:
    patch:
      tags:
      - الإشعارات
      summary: PATCH /notifications/read-all
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notifications.updated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/notifications.updated_Error400'
        '401':
          $ref: '#/components/responses/notifications.updated_Error401'
        '403':
          $ref: '#/components/responses/notifications.updated_Error403'
        '404':
          $ref: '#/components/responses/notifications.updated_Error404'
        '409':
          $ref: '#/components/responses/notifications.updated_Error409'
        '422':
          $ref: '#/components/responses/notifications.updated_Error422'
        '429':
          $ref: '#/components/responses/notifications.updated_Error429'
        '500':
          $ref: '#/components/responses/notifications.updated_Error500'
        '502':
          $ref: '#/components/responses/notifications.updated_Error502'
      security:
      - bearer: []
      parameters: []
  /offers:
    get:
      summary: 'Public: list active offers for a merchant (paginated)'
      description: Requires `merchantId`. Supports limit/offset pagination (limit
        1-100; default 50; offset ≥ 0; default 0).
      parameters:
      - in: query
        name: merchantId
        required: true
        schema:
          type: string
      - in: query
        name: limit
        required: false
        schema:
          type: integer
          minimum: 1
          maximum: 100
          default: 50
      - in: query
        name: offset
        required: false
        schema:
          type: integer
          minimum: 0
          default: 0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/offers.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/Offer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offers.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offers.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offers.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offers.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offers.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offers.fixed_ApiError'
  /plans:
    get:
      tags:
      - الخطط
      summary: GET /plans
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/plans.updated_ApiResponseCursorPage'
        '400':
          $ref: '#/components/responses/plans.updated_Error400'
        '401':
          $ref: '#/components/responses/plans.updated_Error401'
        '403':
          $ref: '#/components/responses/plans.updated_Error403'
        '404':
          $ref: '#/components/responses/plans.updated_Error404'
        '409':
          $ref: '#/components/responses/plans.updated_Error409'
        '422':
          $ref: '#/components/responses/plans.updated_Error422'
        '429':
          $ref: '#/components/responses/plans.updated_Error429'
        '500':
          $ref: '#/components/responses/plans.updated_Error500'
        '502':
          $ref: '#/components/responses/plans.updated_Error502'
      parameters:
      - in: query
        name: q
        required: false
        schema:
          type: string
      - $ref: '#/components/parameters/plans.updated_CursorParam'
      - $ref: '#/components/parameters/plans.updated_LimitParam'
      security:
      - bearer: []
    post:
      tags:
      - الخطط
      summary: POST /plans
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/plans.updated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/plans.updated_Error400'
        '401':
          $ref: '#/components/responses/plans.updated_Error401'
        '403':
          $ref: '#/components/responses/plans.updated_Error403'
        '404':
          $ref: '#/components/responses/plans.updated_Error404'
        '409':
          $ref: '#/components/responses/plans.updated_Error409'
        '422':
          $ref: '#/components/responses/plans.updated_Error422'
        '429':
          $ref: '#/components/responses/plans.updated_Error429'
        '500':
          $ref: '#/components/responses/plans.updated_Error500'
        '502':
          $ref: '#/components/responses/plans.updated_Error502'
      parameters:
      - in: query
        name: q
        required: false
        schema:
          type: string
      security:
      - bearer: []
  /plans/{id}:
    get:
      tags:
      - الخطط
      summary: GET /plans/:id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/plans.updated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/plans.updated_Error400'
        '401':
          $ref: '#/components/responses/plans.updated_Error401'
        '403':
          $ref: '#/components/responses/plans.updated_Error403'
        '404':
          $ref: '#/components/responses/plans.updated_Error404'
        '409':
          $ref: '#/components/responses/plans.updated_Error409'
        '422':
          $ref: '#/components/responses/plans.updated_Error422'
        '429':
          $ref: '#/components/responses/plans.updated_Error429'
        '500':
          $ref: '#/components/responses/plans.updated_Error500'
        '502':
          $ref: '#/components/responses/plans.updated_Error502'
      security:
      - bearer: []
      parameters: []
    put:
      tags:
      - الخطط
      summary: PUT /plans/:id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/plans.updated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/plans.updated_Error400'
        '401':
          $ref: '#/components/responses/plans.updated_Error401'
        '403':
          $ref: '#/components/responses/plans.updated_Error403'
        '404':
          $ref: '#/components/responses/plans.updated_Error404'
        '409':
          $ref: '#/components/responses/plans.updated_Error409'
        '422':
          $ref: '#/components/responses/plans.updated_Error422'
        '429':
          $ref: '#/components/responses/plans.updated_Error429'
        '500':
          $ref: '#/components/responses/plans.updated_Error500'
        '502':
          $ref: '#/components/responses/plans.updated_Error502'
      security:
      - bearer: []
      parameters: []
    delete:
      tags:
      - الخطط
      summary: DELETE /plans/:id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/plans.updated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/plans.updated_Error400'
        '401':
          $ref: '#/components/responses/plans.updated_Error401'
        '403':
          $ref: '#/components/responses/plans.updated_Error403'
        '404':
          $ref: '#/components/responses/plans.updated_Error404'
        '409':
          $ref: '#/components/responses/plans.updated_Error409'
        '422':
          $ref: '#/components/responses/plans.updated_Error422'
        '429':
          $ref: '#/components/responses/plans.updated_Error429'
        '500':
          $ref: '#/components/responses/plans.updated_Error500'
        '502':
          $ref: '#/components/responses/plans.updated_Error502'
      security:
      - bearer: []
      parameters: []
  /plans/{id}/active:
    patch:
      tags:
      - الخطط
      summary: PATCH /plans/:id/active
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/plans.updated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/plans.updated_Error400'
        '401':
          $ref: '#/components/responses/plans.updated_Error401'
        '403':
          $ref: '#/components/responses/plans.updated_Error403'
        '404':
          $ref: '#/components/responses/plans.updated_Error404'
        '409':
          $ref: '#/components/responses/plans.updated_Error409'
        '422':
          $ref: '#/components/responses/plans.updated_Error422'
        '429':
          $ref: '#/components/responses/plans.updated_Error429'
        '500':
          $ref: '#/components/responses/plans.updated_Error500'
        '502':
          $ref: '#/components/responses/plans.updated_Error502'
      security:
      - bearer: []
      parameters: []
  /plans/{id}/archive:
    patch:
      tags:
      - الخطط
      summary: PATCH /plans/:id/archive
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/plans.updated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/plans.updated_Error400'
        '401':
          $ref: '#/components/responses/plans.updated_Error401'
        '403':
          $ref: '#/components/responses/plans.updated_Error403'
        '404':
          $ref: '#/components/responses/plans.updated_Error404'
        '409':
          $ref: '#/components/responses/plans.updated_Error409'
        '422':
          $ref: '#/components/responses/plans.updated_Error422'
        '429':
          $ref: '#/components/responses/plans.updated_Error429'
        '500':
          $ref: '#/components/responses/plans.updated_Error500'
        '502':
          $ref: '#/components/responses/plans.updated_Error502'
      security:
      - bearer: []
      parameters: []
  /products:
    post:
      security:
      - bearer: []
      summary: Create a product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/products.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products.fixed_ApiError'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products.fixed_ApiError'
    get:
      security:
      - bearer: []
      summary: List products (paginated)
      parameters:
      - $ref: '#/components/parameters/products.fixed_LimitParam'
      - $ref: '#/components/parameters/products.fixed_CursorParam'
      - $ref: '#/components/parameters/SortByParam'
      - $ref: '#/components/parameters/SortOrderParam'
      - in: query
        name: search
        schema:
          type: string
      - in: query
        name: categoryId
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - active
          - inactive
          - out_of_stock
      - in: query
        name: source
        schema:
          type: string
          enum:
          - manual
          - api
      - in: query
        name: isAvailable
        schema:
          type: boolean
      - in: query
        name: hasOffer
        schema:
          type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/products.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/ProductsList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products.fixed_ApiError'
  /products/public/{storeSlug}:
    parameters:
    - in: path
      name: storeSlug
      required: true
      schema:
        type: string
    get:
      summary: 'Public: list products by store slug (paginated)'
      parameters:
      - $ref: '#/components/parameters/products.fixed_LimitParam'
      - $ref: '#/components/parameters/products.fixed_CursorParam'
      - $ref: '#/components/parameters/SortByParam'
      - $ref: '#/components/parameters/SortOrderParam'
      - in: query
        name: search
        schema:
          type: string
      - in: query
        name: categoryId
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - active
          - inactive
          - out_of_stock
      - in: query
        name: source
        schema:
          type: string
          enum:
          - manual
          - api
      - in: query
        name: isAvailable
        schema:
          type: boolean
      - in: query
        name: hasOffer
        schema:
          type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/products.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/ProductsList'
        '404':
          description: Store not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products.fixed_ApiError'
  /products/legacy:
    get:
      security:
      - bearer: []
      summary: 'Legacy: list all products for a merchant (non-paginated)'
      parameters:
      - in: query
        name: merchantId
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/products.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products.fixed_ApiError'
        '404':
          description: Merchant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products.fixed_ApiError'
  /products/search:
    get:
      security:
      - bearer: []
      summary: Search products (paginated)
      parameters:
      - in: query
        name: q
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/products.fixed_LimitParam'
      - $ref: '#/components/parameters/products.fixed_CursorParam'
      - $ref: '#/components/parameters/SortByParam'
      - $ref: '#/components/parameters/SortOrderParam'
      - in: query
        name: categoryId
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - active
          - inactive
          - out_of_stock
      - in: query
        name: source
        schema:
          type: string
          enum:
          - manual
          - api
      - in: query
        name: isAvailable
        schema:
          type: boolean
      - in: query
        name: hasOffer
        schema:
          type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/products.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/ProductsList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products.fixed_ApiError'
  /products/{id}:
    parameters:
    - in: path
      name: id
      required: true
      schema:
        type: string
    get:
      summary: 'Public: get product by id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/products.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Product'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products.fixed_ApiError'
    put:
      security:
      - bearer: []
      summary: Update a product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/products.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products.fixed_ApiError'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products.fixed_ApiError'
    delete:
      security:
      - bearer: []
      summary: Delete a product
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/products.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/products.fixed_MessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products.fixed_ApiError'
  /products/{id}/images:
    parameters:
    - in: path
      name: id
      required: true
      schema:
        type: string
    post:
      security:
      - bearer: []
      summary: Upload product images
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
              required:
              - files
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/products.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/UploadImagesResult'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products.fixed_ApiError'
        '413':
          description: Too many files or too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products.fixed_ApiError'
  /products/{id}/availability:
    parameters:
    - in: path
      name: id
      required: true
      schema:
        type: string
    post:
      security:
      - bearer: []
      summary: Set product availability
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isAvailable:
                  type: boolean
              required:
              - isAvailable
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/products.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/products.fixed_MessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products.fixed_ApiError'
  /products/{merchantId}/setup-products:
    parameters:
    - in: path
      name: merchantId
      required: true
      schema:
        type: string
    post:
      security:
      - bearer: []
      summary: Setup products configuration for a merchant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductSetupConfigDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/products.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        success:
                          type: boolean
                          example: true
                        message:
                          type: string
                          example: Saved
                        data:
                          $ref: '#/components/schemas/ProductSetupConfigDto'
                      required:
                      - success
                      - message
                      - data
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products.fixed_ApiError'
        '404':
          description: Merchant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products.fixed_ApiError'
    get:
      security:
      - bearer: []
      summary: Get products setup configuration for a merchant
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/products.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/ProductSetupConfigDto'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products.fixed_ApiError'
        '404':
          description: Merchant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products.fixed_ApiError'
  /products/public/{storeSlug}/product/{productSlug}:
    parameters:
    - in: path
      name: storeSlug
      required: true
      schema:
        type: string
    - in: path
      name: productSlug
      required: true
      schema:
        type: string
    get:
      summary: 'Public: get product by store slug + product slug'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/products.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Product'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products.fixed_ApiError'
  /orders:
    get:
      security:
      - bearer: []
      summary: List orders (paginated)
      parameters:
      - $ref: '#/components/parameters/CursorParam'
      - $ref: '#/components/parameters/LimitParam'
      - name: merchantId
        in: query
        schema:
          type: string
        description: Filter by merchant ID
      - name: status
        in: query
        schema:
          type: string
          enum:
          - pending
          - processing
          - shipped
          - delivered
          - cancelled
        description: Filter by order status
      - name: sessionId
        in: query
        schema:
          type: string
        description: Filter by session ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseCursorPage'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '409':
          $ref: '#/components/responses/Error409'
        '422':
          $ref: '#/components/responses/Error422'
        '429':
          $ref: '#/components/responses/Error429'
        '500':
          $ref: '#/components/responses/Error500'
        '502':
          $ref: '#/components/responses/Error502'
    post:
      security:
      - bearer: []
      summary: Create an order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - name
              - price
              - quantity
              - merchantId
              properties:
                name:
                  type: string
                  example: Premium Coffee
                price:
                  type: number
                  format: double
                  example: 29.99
                quantity:
                  type: integer
                  example: 2
                merchantId:
                  type: string
                  example: mrc_123
                sessionId:
                  type: string
                  example: sess_123456
                customer:
                  type: string
                  example: +966501234567
                products:
                  type: array
                  items:
                    type: string
                  example: ["66fa1f5f9a8e6f0012d3c222"]
                source:
                  type: string
                  enum:
                  - whatsapp
                  - web
                  - api
                  example: whatsapp
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponseBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '409':
          $ref: '#/components/responses/Error409'
        '422':
          $ref: '#/components/responses/Error422'
        '429':
          $ref: '#/components/responses/Error429'
        '500':
          $ref: '#/components/responses/Error500'
        '502':
          $ref: '#/components/responses/Error502'
  /orders/{id}:
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: string
    get:
      security:
      - bearer: []
      summary: Get order by ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponseBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '409':
          $ref: '#/components/responses/Error409'
        '422':
          $ref: '#/components/responses/Error422'
        '429':
          $ref: '#/components/responses/Error429'
        '500':
          $ref: '#/components/responses/Error500'
        '502':
          $ref: '#/components/responses/Error502'
    patch:
      security:
      - bearer: []
      summary: Update order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                  - pending
                  - processing
                  - shipped
                  - delivered
                  - cancelled
                quantity:
                  type: integer
                price:
                  type: number
                  format: double
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponseBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '409':
          $ref: '#/components/responses/Error409'
        '422':
          $ref: '#/components/responses/Error422'
        '429':
          $ref: '#/components/responses/Error429'
        '500':
          $ref: '#/components/responses/Error500'
        '502':
          $ref: '#/components/responses/Error502'
    delete:
      security:
      - bearer: []
      summary: Delete order
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseAny'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '409':
          $ref: '#/components/responses/Error409'
        '422':
          $ref: '#/components/responses/Error422'
        '429':
          $ref: '#/components/responses/Error429'
        '500':
          $ref: '#/components/responses/Error500'
        '502':
          $ref: '#/components/responses/Error502'
  /orders/{id}/status:
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: string
    patch:
      security:
      - bearer: []
      summary: Update order status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - status
              properties:
                status:
                  type: string
                  enum:
                  - pending
                  - processing
                  - shipped
                  - delivered
                  - cancelled
                  example: shipped
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponseBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        '409':
          $ref: '#/components/responses/Error409'
        '422':
          $ref: '#/components/responses/Error422'
        '429':
          $ref: '#/components/responses/Error429'
        '500':
          $ref: '#/components/responses/Error500'
        '502':
          $ref: '#/components/responses/Error502'
  /storefront/merchant:
    get:
      security:
      - bearer: []
      summary: Get my storefront (by authenticated merchant)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/storefront.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Storefront'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
  /storefront/merchant/{merchantId}:
    parameters:
    - in: path
      name: merchantId
      required: true
      schema:
        type: string
    get:
      security:
      - bearer: []
      summary: Get storefront by merchantId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/storefront.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Storefront'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
  /storefront/merchant/{id}:
    parameters:
    - in: path
      name: id
      required: true
      schema:
        type: string
    patch:
      security:
      - bearer: []
      summary: Update storefront by storefront id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStorefrontDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/storefront.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Storefront'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
  /storefront/by-merchant/{merchantId}:
    parameters:
    - in: path
      name: merchantId
      required: true
      schema:
        type: string
    patch:
      security:
      - bearer: []
      summary: Update storefront by merchantId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStorefrontDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/storefront.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Storefront'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
  /storefront:
    post:
      security:
      - bearer: []
      summary: Create storefront
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStorefrontDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/storefront.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Storefront'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
  /storefront/slug/check:
    get:
      security:
      - bearer: []
      summary: Check slug availability for storefront
      parameters:
      - in: query
        name: slug
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/storefront.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/SlugCheckResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
  /storefront/by-merchant/{merchantId}/banners/upload:
    parameters:
    - in: path
      name: merchantId
      required: true
      schema:
        type: string
    post:
      security:
      - bearer: []
      summary: Upload banner images (multipart) for merchant storefront
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
              required:
              - files
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/storefront.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/UploadBannersResult'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
  /storefront/{slugOrId}:
    parameters:
    - in: path
      name: slugOrId
      required: true
      schema:
        type: string
    get:
      summary: 'Public: get storefront by slug or id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/storefront.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Storefront'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
  /storefront/merchant/{merchantId}/my-orders:
    parameters:
    - in: path
      name: merchantId
      required: true
      schema:
        type: string
    - in: query
      name: sessionId
      required: true
      schema:
        type: string
    - in: query
      name: phone
      required: false
      schema:
        type: string
    - in: query
      name: limit
      required: false
      schema:
        type: integer
        default: 50
        maximum: 200
    get:
      summary: 'Public: list my orders by session (or phone) for a merchant'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/storefront.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/MyOrdersResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
  /storefront/public/storefront/{slug}/brand.css:
    parameters:
    - in: path
      name: slug
      required: true
      schema:
        type: string
    get:
      summary: 'Public: get brand CSS variables by storefront slug'
      responses:
        '200':
          description: CSS
          content:
            text/css:
              schema:
                type: string
                example: :root{--brand:#111827;}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storefront.fixed_ApiError'
  /support/contact:
    post:
      tags:
      - support
      summary: POST /support/contact
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/support.updated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/support.updated_Error400'
        '401':
          $ref: '#/components/responses/support.updated_Error401'
        '403':
          $ref: '#/components/responses/support.updated_Error403'
        '404':
          $ref: '#/components/responses/support.updated_Error404'
        '409':
          $ref: '#/components/responses/support.updated_Error409'
        '422':
          $ref: '#/components/responses/support.updated_Error422'
        '429':
          $ref: '#/components/responses/support.updated_Error429'
        '500':
          $ref: '#/components/responses/support.updated_Error500'
        '502':
          $ref: '#/components/responses/support.updated_Error502'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
              - file
  /support/contact/merchant:
    post:
      tags:
      - support
      summary: POST /support/contact/merchant
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/support.updated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/support.updated_Error400'
        '401':
          $ref: '#/components/responses/support.updated_Error401'
        '403':
          $ref: '#/components/responses/support.updated_Error403'
        '404':
          $ref: '#/components/responses/support.updated_Error404'
        '409':
          $ref: '#/components/responses/support.updated_Error409'
        '422':
          $ref: '#/components/responses/support.updated_Error422'
        '429':
          $ref: '#/components/responses/support.updated_Error429'
        '500':
          $ref: '#/components/responses/support.updated_Error500'
        '502':
          $ref: '#/components/responses/support.updated_Error502'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
              - file
  /health:
    get:
      tags:
      - System
      summary: GET /health
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/system.updated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/system.updated_Error400'
        '401':
          $ref: '#/components/responses/system.updated_Error401'
        '403':
          $ref: '#/components/responses/system.updated_Error403'
        '404':
          $ref: '#/components/responses/system.updated_Error404'
        '409':
          $ref: '#/components/responses/system.updated_Error409'
        '422':
          $ref: '#/components/responses/system.updated_Error422'
        '429':
          $ref: '#/components/responses/system.updated_Error429'
        '500':
          $ref: '#/components/responses/system.updated_Error500'
        '502':
          $ref: '#/components/responses/system.updated_Error502'
  /health/detailed:
    get:
      tags:
      - System
      summary: GET /health/detailed
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/system.updated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/system.updated_Error400'
        '401':
          $ref: '#/components/responses/system.updated_Error401'
        '403':
          $ref: '#/components/responses/system.updated_Error403'
        '404':
          $ref: '#/components/responses/system.updated_Error404'
        '409':
          $ref: '#/components/responses/system.updated_Error409'
        '422':
          $ref: '#/components/responses/system.updated_Error422'
        '429':
          $ref: '#/components/responses/system.updated_Error429'
        '500':
          $ref: '#/components/responses/system.updated_Error500'
        '502':
          $ref: '#/components/responses/system.updated_Error502'
  /health/readiness:
    get:
      tags:
      - System
      summary: GET /health/readiness
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/system.updated_ApiResponseCursorPage'
        '400':
          $ref: '#/components/responses/system.updated_Error400'
        '401':
          $ref: '#/components/responses/system.updated_Error401'
        '403':
          $ref: '#/components/responses/system.updated_Error403'
        '404':
          $ref: '#/components/responses/system.updated_Error404'
        '409':
          $ref: '#/components/responses/system.updated_Error409'
        '422':
          $ref: '#/components/responses/system.updated_Error422'
        '429':
          $ref: '#/components/responses/system.updated_Error429'
        '500':
          $ref: '#/components/responses/system.updated_Error500'
        '502':
          $ref: '#/components/responses/system.updated_Error502'
  /health/liveness:
    get:
      tags:
      - System
      summary: GET /health/liveness
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/system.updated_ApiResponseCursorPage'
        '400':
          $ref: '#/components/responses/system.updated_Error400'
        '401':
          $ref: '#/components/responses/system.updated_Error401'
        '403':
          $ref: '#/components/responses/system.updated_Error403'
        '404':
          $ref: '#/components/responses/system.updated_Error404'
        '409':
          $ref: '#/components/responses/system.updated_Error409'
        '422':
          $ref: '#/components/responses/system.updated_Error422'
        '429':
          $ref: '#/components/responses/system.updated_Error429'
        '500':
          $ref: '#/components/responses/system.updated_Error500'
        '502':
          $ref: '#/components/responses/system.updated_Error502'
  /usage/{merchantId}:
    get:
      tags:
      - Usage
      summary: GET /usage/:merchantId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usage.updated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/usage.updated_Error400'
        '401':
          $ref: '#/components/responses/usage.updated_Error401'
        '403':
          $ref: '#/components/responses/usage.updated_Error403'
        '404':
          $ref: '#/components/responses/usage.updated_Error404'
        '409':
          $ref: '#/components/responses/usage.updated_Error409'
        '422':
          $ref: '#/components/responses/usage.updated_Error422'
        '429':
          $ref: '#/components/responses/usage.updated_Error429'
        '500':
          $ref: '#/components/responses/usage.updated_Error500'
        '502':
          $ref: '#/components/responses/usage.updated_Error502'
      parameters:
      - in: path
        name: merchantId
        required: true
        schema:
          type: string
      - in: query
        name: monthKey
        required: false
        schema:
          type: string
  /users:
    get:
      tags:
      - Users
      summary: GET /users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersListEnvelope'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users.fixed_ApiError'
      security:
      - bearer: []
    post:
      tags:
      - Users
      summary: POST /users
      responses:
        '200':
          description: OK
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEnvelope'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users.fixed_ApiError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
              required:
              - id
      security:
      - bearer: []
  /users/{id}:
    get:
      tags:
      - Users
      summary: GET /users/:id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEnvelope'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users.fixed_ApiError'
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      security:
      - bearer: []
    put:
      tags:
      - Users
      summary: PUT /users/:id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEnvelope'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users.fixed_ApiError'
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      security:
      - bearer: []
  /users/{id}/notifications:
    get:
      tags:
      - Users
      summary: GET /users/:id/notifications
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationsPrefsEnvelope'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users.fixed_ApiError'
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      security:
      - bearer: []
    put:
      tags:
      - Users
      summary: PUT /users/:id/notifications
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationsPrefsEnvelope'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users.fixed_ApiError'
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      security:
      - bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationsPrefsDto'
  /users/{id}/delete:
    post:
      tags:
      - Users
      summary: POST /users/:id/delete
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users.fixed_MessageResponseEnvelope'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users.fixed_ApiError'
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      security:
      - bearer: []
  /vector/products:
    post:
      security:
      - bearer: []
      summary: Index/Upsert product vectors for a merchant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndexProductsRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/vector.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/IndexSummary'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vector.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vector.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vector.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vector.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vector.fixed_ApiError'
    get:
      security:
      - bearer: []
      summary: Get vector indexing status for a merchant
      parameters:
      - in: query
        name: merchantId
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/vector.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/IndexStatus'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vector.fixed_ApiError'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vector.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vector.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vector.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vector.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vector.fixed_ApiError'
  /vector/unified-search:
    post:
      security:
      - bearer: []
      summary: Unified semantic search across products/offers/faqs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SemanticSearchRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/vector.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/UnifiedSearchResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vector.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vector.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vector.fixed_ApiError'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vector.fixed_ApiError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vector.fixed_ApiError'
  /webhooks/whatsapp-cloud:
    get:
      summary: Webhook verification (Meta/WhatsApp Cloud) — echoes hub.challenge if
        verify_token matches
      parameters:
      - in: query
        name: hub.mode
        schema:
          type: string
      - in: query
        name: hub.verify_token
        schema:
          type: string
      - in: query
        name: hub.challenge
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/webhooks.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/OkAck'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks.fixed_ApiError'
    post:
      summary: Receive WhatsApp Cloud webhook events
      security:
      - waCloudSignature256: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WhatsAppCloudPayload'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/webhooks.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/OkAck'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks.fixed_ApiError'
  /webhooks/whatsapp-qr:
    post:
      summary: Receive WhatsApp QR (Evolution) webhook events
      security:
      - evolutionApiKey: []
      - evolutionApiKeyLegacy: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WhatsAppQrPayload'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/webhooks.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/OkAck'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks.fixed_ApiError'
  /webhooks/telegram:
    post:
      summary: Receive Telegram webhook updates
      security:
      - telegramSecret: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelegramUpdate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/webhooks.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/OkAck'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks.fixed_ApiError'
  /webhooks/incoming/{slug}/bot-reply:
    parameters:
    - in: path
      name: slug
      required: true
      schema:
        type: string
    post:
      summary: 'Public: send a bot reply into a conversation (identified by store
        slug)'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BotReplyDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/webhooks.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/OkAck'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks.fixed_ApiError'
  /webhooks/incoming/{slug}/agent-reply:
    parameters:
    - in: path
      name: slug
      required: true
      schema:
        type: string
    post:
      summary: 'Public: send an agent reply into a conversation (identified by store
        slug)'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentReplyDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/webhooks.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/OkAck'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks.fixed_ApiError'
  /webhooks/incoming/{slug}/ping:
    parameters:
    - in: path
      name: slug
      required: true
      schema:
        type: string
    post:
      summary: 'Public: verify slug connectivity (health ping)'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/webhooks.fixed_ApiSuccessBase'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/OkAck'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks.fixed_ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks.fixed_ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks.fixed_ApiError'
  /admin/kleem/bot-chats/ratings:
    get:
      operationId: admin/kleem/bot-chats/ratings_list_6ecedb
      tags:
      - admin/kleem/bot-chats/ratings
      parameters:
      - name: from
        in: query
        required: false
        schema:
          type: string
      - name: to
        in: query
        required: false
        schema:
          type: string
      - $ref: '#/components/parameters/kleem.generated_CursorParam'
      - $ref: '#/components/parameters/kleem.generated_LimitParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kleem.generated_ApiResponseCursorPage'
        '400':
          $ref: '#/components/responses/kleem.generated_Error400'
        '401':
          $ref: '#/components/responses/kleem.generated_Error401'
        '403':
          $ref: '#/components/responses/kleem.generated_Error403'
        '404':
          $ref: '#/components/responses/kleem.generated_Error404'
        '409':
          $ref: '#/components/responses/kleem.generated_Error409'
        '422':
          $ref: '#/components/responses/kleem.generated_Error422'
        '429':
          $ref: '#/components/responses/kleem.generated_Error429'
        '500':
          $ref: '#/components/responses/kleem.generated_Error500'
        '502':
          $ref: '#/components/responses/kleem.generated_Error502'
      security:
      - BearerAuth: []
  /admin/kleem/bot-chats/ratings/stats:
    get:
      operationId: admin/kleem/bot-chats/ratings_stats_8ec666
      tags:
      - admin/kleem/bot-chats/ratings
      parameters:
      - name: from
        in: query
        required: false
        schema:
          type: string
      - name: to
        in: query
        required: false
        schema:
          type: string
      - $ref: '#/components/parameters/kleem.generated_CursorParam'
      - $ref: '#/components/parameters/kleem.generated_LimitParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kleem.generated_ApiResponseCursorPage'
        '400':
          $ref: '#/components/responses/kleem.generated_Error400'
        '401':
          $ref: '#/components/responses/kleem.generated_Error401'
        '403':
          $ref: '#/components/responses/kleem.generated_Error403'
        '404':
          $ref: '#/components/responses/kleem.generated_Error404'
        '409':
          $ref: '#/components/responses/kleem.generated_Error409'
        '422':
          $ref: '#/components/responses/kleem.generated_Error422'
        '429':
          $ref: '#/components/responses/kleem.generated_Error429'
        '500':
          $ref: '#/components/responses/kleem.generated_Error500'
        '502':
          $ref: '#/components/responses/kleem.generated_Error502'
      security:
      - BearerAuth: []
  /admin/kleem/bot-chats/{sessionId}:
    post:
      operationId: Bot_Chats_ApiOperation_e19fca
      tags:
      - Bot Chats
      parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kleem.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/kleem.generated_Error400'
        '401':
          $ref: '#/components/responses/kleem.generated_Error401'
        '403':
          $ref: '#/components/responses/kleem.generated_Error403'
        '404':
          $ref: '#/components/responses/kleem.generated_Error404'
        '409':
          $ref: '#/components/responses/kleem.generated_Error409'
        '422':
          $ref: '#/components/responses/kleem.generated_Error422'
        '429':
          $ref: '#/components/responses/kleem.generated_Error429'
        '500':
          $ref: '#/components/responses/kleem.generated_Error500'
        '502':
          $ref: '#/components/responses/kleem.generated_Error502'
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
    get:
      operationId: Bot_Chats_ApiOperation_5db21c
      tags:
      - Bot Chats
      parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kleem.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/kleem.generated_Error400'
        '401':
          $ref: '#/components/responses/kleem.generated_Error401'
        '403':
          $ref: '#/components/responses/kleem.generated_Error403'
        '404':
          $ref: '#/components/responses/kleem.generated_Error404'
        '409':
          $ref: '#/components/responses/kleem.generated_Error409'
        '422':
          $ref: '#/components/responses/kleem.generated_Error422'
        '429':
          $ref: '#/components/responses/kleem.generated_Error429'
        '500':
          $ref: '#/components/responses/kleem.generated_Error500'
        '502':
          $ref: '#/components/responses/kleem.generated_Error502'
      security:
      - BearerAuth: []
  /admin/kleem/bot-chats/{sessionId}/rate/{msgIdx}:
    patch:
      operationId: Bot_Chats_ApiOperation_aa9a57
      tags:
      - Bot Chats
      parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      - name: msgIdx
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kleem.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/kleem.generated_Error400'
        '401':
          $ref: '#/components/responses/kleem.generated_Error401'
        '403':
          $ref: '#/components/responses/kleem.generated_Error403'
        '404':
          $ref: '#/components/responses/kleem.generated_Error404'
        '409':
          $ref: '#/components/responses/kleem.generated_Error409'
        '422':
          $ref: '#/components/responses/kleem.generated_Error422'
        '429':
          $ref: '#/components/responses/kleem.generated_Error429'
        '500':
          $ref: '#/components/responses/kleem.generated_Error500'
        '502':
          $ref: '#/components/responses/kleem.generated_Error502'
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
  /admin/kleem/bot-chats:
    get:
      operationId: Bot_Chats_ApiOperation_0c4aa2
      tags:
      - Bot Chats
      parameters:
      - $ref: '#/components/parameters/kleem.generated_CursorParam'
      - $ref: '#/components/parameters/kleem.generated_LimitParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kleem.generated_ApiResponseCursorPage'
        '400':
          $ref: '#/components/responses/kleem.generated_Error400'
        '401':
          $ref: '#/components/responses/kleem.generated_Error401'
        '403':
          $ref: '#/components/responses/kleem.generated_Error403'
        '404':
          $ref: '#/components/responses/kleem.generated_Error404'
        '409':
          $ref: '#/components/responses/kleem.generated_Error409'
        '422':
          $ref: '#/components/responses/kleem.generated_Error422'
        '429':
          $ref: '#/components/responses/kleem.generated_Error429'
        '500':
          $ref: '#/components/responses/kleem.generated_Error500'
        '502':
          $ref: '#/components/responses/kleem.generated_Error502'
      security:
      - BearerAuth: []
  /admin/kleem/bot-chats/stats/top-questions/list:
    get:
      operationId: Bot_Chats_ApiOperation_6dfced
      tags:
      - Bot Chats
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kleem.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/kleem.generated_Error400'
        '401':
          $ref: '#/components/responses/kleem.generated_Error401'
        '403':
          $ref: '#/components/responses/kleem.generated_Error403'
        '404':
          $ref: '#/components/responses/kleem.generated_Error404'
        '409':
          $ref: '#/components/responses/kleem.generated_Error409'
        '422':
          $ref: '#/components/responses/kleem.generated_Error422'
        '429':
          $ref: '#/components/responses/kleem.generated_Error429'
        '500':
          $ref: '#/components/responses/kleem.generated_Error500'
        '502':
          $ref: '#/components/responses/kleem.generated_Error502'
      security:
      - BearerAuth: []
  /admin/kleem/bot-chats/stats/bad-bot-replies/list:
    get:
      operationId: Bot_Chats_ApiOperation_c47787
      tags:
      - Bot Chats
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kleem.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/kleem.generated_Error400'
        '401':
          $ref: '#/components/responses/kleem.generated_Error401'
        '403':
          $ref: '#/components/responses/kleem.generated_Error403'
        '404':
          $ref: '#/components/responses/kleem.generated_Error404'
        '409':
          $ref: '#/components/responses/kleem.generated_Error409'
        '422':
          $ref: '#/components/responses/kleem.generated_Error422'
        '429':
          $ref: '#/components/responses/kleem.generated_Error429'
        '500':
          $ref: '#/components/responses/kleem.generated_Error500'
        '502':
          $ref: '#/components/responses/kleem.generated_Error502'
      security:
      - BearerAuth: []
  /admin/kleem/bot-faqs:
    post:
      operationId: kleem.botFaq_ApiOperation_538338
      tags:
      - kleem.botFaq
      - الأسئلة الشائعة - عام
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kleem.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/kleem.generated_Error400'
        '401':
          $ref: '#/components/responses/kleem.generated_Error401'
        '403':
          $ref: '#/components/responses/kleem.generated_Error403'
        '404':
          $ref: '#/components/responses/kleem.generated_Error404'
        '409':
          $ref: '#/components/responses/kleem.generated_Error409'
        '422':
          $ref: '#/components/responses/kleem.generated_Error422'
        '429':
          $ref: '#/components/responses/kleem.generated_Error429'
        '500':
          $ref: '#/components/responses/kleem.generated_Error500'
        '502':
          $ref: '#/components/responses/kleem.generated_Error502'
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
    get:
      operationId: kleem.botFaq_ApiOperation_ff30ea
      tags:
      - kleem.botFaq
      - الأسئلة الشائعة - عام
      parameters:
      - $ref: '#/components/parameters/kleem.generated_CursorParam'
      - $ref: '#/components/parameters/kleem.generated_LimitParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kleem.generated_ApiResponseCursorPage'
        '400':
          $ref: '#/components/responses/kleem.generated_Error400'
        '401':
          $ref: '#/components/responses/kleem.generated_Error401'
        '403':
          $ref: '#/components/responses/kleem.generated_Error403'
        '404':
          $ref: '#/components/responses/kleem.generated_Error404'
        '409':
          $ref: '#/components/responses/kleem.generated_Error409'
        '422':
          $ref: '#/components/responses/kleem.generated_Error422'
        '429':
          $ref: '#/components/responses/kleem.generated_Error429'
        '500':
          $ref: '#/components/responses/kleem.generated_Error500'
        '502':
          $ref: '#/components/responses/kleem.generated_Error502'
      security:
      - BearerAuth: []
  /admin/kleem/bot-faqs/{id}:
    patch:
      operationId: kleem.botFaq_ApiOperation_a7a8f2
      tags:
      - kleem.botFaq
      - الأسئلة الشائعة - عام
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kleem.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/kleem.generated_Error400'
        '401':
          $ref: '#/components/responses/kleem.generated_Error401'
        '403':
          $ref: '#/components/responses/kleem.generated_Error403'
        '404':
          $ref: '#/components/responses/kleem.generated_Error404'
        '409':
          $ref: '#/components/responses/kleem.generated_Error409'
        '422':
          $ref: '#/components/responses/kleem.generated_Error422'
        '429':
          $ref: '#/components/responses/kleem.generated_Error429'
        '500':
          $ref: '#/components/responses/kleem.generated_Error500'
        '502':
          $ref: '#/components/responses/kleem.generated_Error502'
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
    delete:
      operationId: kleem.botFaq_ApiOperation_cbd620
      tags:
      - kleem.botFaq
      - الأسئلة الشائعة - عام
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kleem.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/kleem.generated_Error400'
        '401':
          $ref: '#/components/responses/kleem.generated_Error401'
        '403':
          $ref: '#/components/responses/kleem.generated_Error403'
        '404':
          $ref: '#/components/responses/kleem.generated_Error404'
        '409':
          $ref: '#/components/responses/kleem.generated_Error409'
        '422':
          $ref: '#/components/responses/kleem.generated_Error422'
        '429':
          $ref: '#/components/responses/kleem.generated_Error429'
        '500':
          $ref: '#/components/responses/kleem.generated_Error500'
        '502':
          $ref: '#/components/responses/kleem.generated_Error502'
      security:
      - BearerAuth: []
  /admin/kleem/bot-faqs/import:
    post:
      operationId: kleem.botFaq_ApiOperation_622b54
      tags:
      - kleem.botFaq
      - الأسئلة الشائعة - عام
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kleem.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/kleem.generated_Error400'
        '401':
          $ref: '#/components/responses/kleem.generated_Error401'
        '403':
          $ref: '#/components/responses/kleem.generated_Error403'
        '404':
          $ref: '#/components/responses/kleem.generated_Error404'
        '409':
          $ref: '#/components/responses/kleem.generated_Error409'
        '422':
          $ref: '#/components/responses/kleem.generated_Error422'
        '429':
          $ref: '#/components/responses/kleem.generated_Error429'
        '500':
          $ref: '#/components/responses/kleem.generated_Error500'
        '502':
          $ref: '#/components/responses/kleem.generated_Error502'
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
  /admin/kleem/bot-faqs/import/file:
    post:
      operationId: kleem.botFaq_UseInterceptors_d62cd6
      tags:
      - kleem.botFaq
      - الأسئلة الشائعة - عام
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kleem.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/kleem.generated_Error400'
        '401':
          $ref: '#/components/responses/kleem.generated_Error401'
        '403':
          $ref: '#/components/responses/kleem.generated_Error403'
        '404':
          $ref: '#/components/responses/kleem.generated_Error404'
        '409':
          $ref: '#/components/responses/kleem.generated_Error409'
        '422':
          $ref: '#/components/responses/kleem.generated_Error422'
        '429':
          $ref: '#/components/responses/kleem.generated_Error429'
        '500':
          $ref: '#/components/responses/kleem.generated_Error500'
        '502':
          $ref: '#/components/responses/kleem.generated_Error502'
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
  /admin/kleem/bot-faqs/reindex:
    post:
      operationId: kleem.botFaq_ApiOperation_fa3ddd
      tags:
      - kleem.botFaq
      - الأسئلة الشائعة - عام
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kleem.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/kleem.generated_Error400'
        '401':
          $ref: '#/components/responses/kleem.generated_Error401'
        '403':
          $ref: '#/components/responses/kleem.generated_Error403'
        '404':
          $ref: '#/components/responses/kleem.generated_Error404'
        '409':
          $ref: '#/components/responses/kleem.generated_Error409'
        '422':
          $ref: '#/components/responses/kleem.generated_Error422'
        '429':
          $ref: '#/components/responses/kleem.generated_Error429'
        '500':
          $ref: '#/components/responses/kleem.generated_Error500'
        '502':
          $ref: '#/components/responses/kleem.generated_Error502'
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
  /admin/kleem/bot-faqs/semantic-search:
    get:
      operationId: kleem.botFaq_Public_73f15d
      tags:
      - kleem.botFaq
      - الأسئلة الشائعة - عام
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kleem.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/kleem.generated_Error400'
        '401':
          $ref: '#/components/responses/kleem.generated_Error401'
        '403':
          $ref: '#/components/responses/kleem.generated_Error403'
        '404':
          $ref: '#/components/responses/kleem.generated_Error404'
        '409':
          $ref: '#/components/responses/kleem.generated_Error409'
        '422':
          $ref: '#/components/responses/kleem.generated_Error422'
        '429':
          $ref: '#/components/responses/kleem.generated_Error429'
        '500':
          $ref: '#/components/responses/kleem.generated_Error500'
        '502':
          $ref: '#/components/responses/kleem.generated_Error502'
      security:
      - BearerAuth: []
  /kleem/faq/semantic-search:
    get:
      operationId: kleem.botFaq_Public_d6a146
      tags:
      - kleem.botFaq
      - الأسئلة الشائعة - عام
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kleem.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/kleem.generated_Error400'
        '401':
          $ref: '#/components/responses/kleem.generated_Error401'
        '403':
          $ref: '#/components/responses/kleem.generated_Error403'
        '404':
          $ref: '#/components/responses/kleem.generated_Error404'
        '409':
          $ref: '#/components/responses/kleem.generated_Error409'
        '422':
          $ref: '#/components/responses/kleem.generated_Error422'
        '429':
          $ref: '#/components/responses/kleem.generated_Error429'
        '500':
          $ref: '#/components/responses/kleem.generated_Error500'
        '502':
          $ref: '#/components/responses/kleem.generated_Error502'
      security:
      - BearerAuth: []
  /admin/kleem/bot-prompts:
    post:
      operationId: kleem.botPrompt_HttpCode_0aec84
      tags:
      - kleem.botPrompt
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kleem.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/kleem.generated_Error400'
        '401':
          $ref: '#/components/responses/kleem.generated_Error401'
        '403':
          $ref: '#/components/responses/kleem.generated_Error403'
        '404':
          $ref: '#/components/responses/kleem.generated_Error404'
        '409':
          $ref: '#/components/responses/kleem.generated_Error409'
        '422':
          $ref: '#/components/responses/kleem.generated_Error422'
        '429':
          $ref: '#/components/responses/kleem.generated_Error429'
        '500':
          $ref: '#/components/responses/kleem.generated_Error500'
        '502':
          $ref: '#/components/responses/kleem.generated_Error502'
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
    get:
      operationId: kleem.botPrompt_ApiOperation_263ed3
      tags:
      - kleem.botPrompt
      parameters:
      - $ref: '#/components/parameters/kleem.generated_CursorParam'
      - $ref: '#/components/parameters/kleem.generated_LimitParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kleem.generated_ApiResponseCursorPage'
        '400':
          $ref: '#/components/responses/kleem.generated_Error400'
        '401':
          $ref: '#/components/responses/kleem.generated_Error401'
        '403':
          $ref: '#/components/responses/kleem.generated_Error403'
        '404':
          $ref: '#/components/responses/kleem.generated_Error404'
        '409':
          $ref: '#/components/responses/kleem.generated_Error409'
        '422':
          $ref: '#/components/responses/kleem.generated_Error422'
        '429':
          $ref: '#/components/responses/kleem.generated_Error429'
        '500':
          $ref: '#/components/responses/kleem.generated_Error500'
        '502':
          $ref: '#/components/responses/kleem.generated_Error502'
      security:
      - BearerAuth: []
  /admin/kleem/bot-prompts/ping:
    get:
      operationId: kleem.botPrompt_Public_056094
      tags:
      - kleem.botPrompt
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kleem.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/kleem.generated_Error400'
        '401':
          $ref: '#/components/responses/kleem.generated_Error401'
        '403':
          $ref: '#/components/responses/kleem.generated_Error403'
        '404':
          $ref: '#/components/responses/kleem.generated_Error404'
        '409':
          $ref: '#/components/responses/kleem.generated_Error409'
        '422':
          $ref: '#/components/responses/kleem.generated_Error422'
        '429':
          $ref: '#/components/responses/kleem.generated_Error429'
        '500':
          $ref: '#/components/responses/kleem.generated_Error500'
        '502':
          $ref: '#/components/responses/kleem.generated_Error502'
      security:
      - BearerAuth: []
  /admin/kleem/bot-prompts/{id}:
    get:
      operationId: kleem.botPrompt_ApiOperation_7fd396
      tags:
      - kleem.botPrompt
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kleem.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/kleem.generated_Error400'
        '401':
          $ref: '#/components/responses/kleem.generated_Error401'
        '403':
          $ref: '#/components/responses/kleem.generated_Error403'
        '404':
          $ref: '#/components/responses/kleem.generated_Error404'
        '409':
          $ref: '#/components/responses/kleem.generated_Error409'
        '422':
          $ref: '#/components/responses/kleem.generated_Error422'
        '429':
          $ref: '#/components/responses/kleem.generated_Error429'
        '500':
          $ref: '#/components/responses/kleem.generated_Error500'
        '502':
          $ref: '#/components/responses/kleem.generated_Error502'
      security:
      - BearerAuth: []
    patch:
      operationId: kleem.botPrompt_ApiOperation_1fd517
      tags:
      - kleem.botPrompt
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kleem.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/kleem.generated_Error400'
        '401':
          $ref: '#/components/responses/kleem.generated_Error401'
        '403':
          $ref: '#/components/responses/kleem.generated_Error403'
        '404':
          $ref: '#/components/responses/kleem.generated_Error404'
        '409':
          $ref: '#/components/responses/kleem.generated_Error409'
        '422':
          $ref: '#/components/responses/kleem.generated_Error422'
        '429':
          $ref: '#/components/responses/kleem.generated_Error429'
        '500':
          $ref: '#/components/responses/kleem.generated_Error500'
        '502':
          $ref: '#/components/responses/kleem.generated_Error502'
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
    delete:
      operationId: kleem.botPrompt_HttpCode_61fb0b
      tags:
      - kleem.botPrompt
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kleem.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/kleem.generated_Error400'
        '401':
          $ref: '#/components/responses/kleem.generated_Error401'
        '403':
          $ref: '#/components/responses/kleem.generated_Error403'
        '404':
          $ref: '#/components/responses/kleem.generated_Error404'
        '409':
          $ref: '#/components/responses/kleem.generated_Error409'
        '422':
          $ref: '#/components/responses/kleem.generated_Error422'
        '429':
          $ref: '#/components/responses/kleem.generated_Error429'
        '500':
          $ref: '#/components/responses/kleem.generated_Error500'
        '502':
          $ref: '#/components/responses/kleem.generated_Error502'
      security:
      - BearerAuth: []
  /admin/kleem/bot-prompts/{id}/active:
    post:
      operationId: kleem.botPrompt_ApiOperation_ac9e4d
      tags:
      - kleem.botPrompt
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kleem.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/kleem.generated_Error400'
        '401':
          $ref: '#/components/responses/kleem.generated_Error401'
        '403':
          $ref: '#/components/responses/kleem.generated_Error403'
        '404':
          $ref: '#/components/responses/kleem.generated_Error404'
        '409':
          $ref: '#/components/responses/kleem.generated_Error409'
        '422':
          $ref: '#/components/responses/kleem.generated_Error422'
        '429':
          $ref: '#/components/responses/kleem.generated_Error429'
        '500':
          $ref: '#/components/responses/kleem.generated_Error500'
        '502':
          $ref: '#/components/responses/kleem.generated_Error502'
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
  /admin/kleem/bot-prompts/{id}/archive:
    post:
      operationId: kleem.botPrompt_ApiOperation_bfa926
      tags:
      - kleem.botPrompt
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kleem.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/kleem.generated_Error400'
        '401':
          $ref: '#/components/responses/kleem.generated_Error401'
        '403':
          $ref: '#/components/responses/kleem.generated_Error403'
        '404':
          $ref: '#/components/responses/kleem.generated_Error404'
        '409':
          $ref: '#/components/responses/kleem.generated_Error409'
        '422':
          $ref: '#/components/responses/kleem.generated_Error422'
        '429':
          $ref: '#/components/responses/kleem.generated_Error429'
        '500':
          $ref: '#/components/responses/kleem.generated_Error500'
        '502':
          $ref: '#/components/responses/kleem.generated_Error502'
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
  /admin/kleem/bot-prompts/system/active:
    get:
      operationId: kleem.botPrompt_ApiOperation_995c63
      tags:
      - kleem.botPrompt
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kleem.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/kleem.generated_Error400'
        '401':
          $ref: '#/components/responses/kleem.generated_Error401'
        '403':
          $ref: '#/components/responses/kleem.generated_Error403'
        '404':
          $ref: '#/components/responses/kleem.generated_Error404'
        '409':
          $ref: '#/components/responses/kleem.generated_Error409'
        '422':
          $ref: '#/components/responses/kleem.generated_Error422'
        '429':
          $ref: '#/components/responses/kleem.generated_Error429'
        '500':
          $ref: '#/components/responses/kleem.generated_Error500'
        '502':
          $ref: '#/components/responses/kleem.generated_Error502'
      security:
      - BearerAuth: []
  /admin/kleem/bot-prompts/system/active/content:
    get:
      operationId: kleem.botPrompt_ApiOperation_968f36
      tags:
      - kleem.botPrompt
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kleem.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/kleem.generated_Error400'
        '401':
          $ref: '#/components/responses/kleem.generated_Error401'
        '403':
          $ref: '#/components/responses/kleem.generated_Error403'
        '404':
          $ref: '#/components/responses/kleem.generated_Error404'
        '409':
          $ref: '#/components/responses/kleem.generated_Error409'
        '422':
          $ref: '#/components/responses/kleem.generated_Error422'
        '429':
          $ref: '#/components/responses/kleem.generated_Error429'
        '500':
          $ref: '#/components/responses/kleem.generated_Error500'
        '502':
          $ref: '#/components/responses/kleem.generated_Error502'
      security:
      - BearerAuth: []
  /admin/kleem/prompts/sandbox:
    post:
      operationId: كليم_-_ساندبوكس_البرومبت_ApiOperation_43ab12
      tags:
      - كليم - ساندبوكس البرومبت
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kleem.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/kleem.generated_Error400'
        '401':
          $ref: '#/components/responses/kleem.generated_Error401'
        '403':
          $ref: '#/components/responses/kleem.generated_Error403'
        '404':
          $ref: '#/components/responses/kleem.generated_Error404'
        '409':
          $ref: '#/components/responses/kleem.generated_Error409'
        '422':
          $ref: '#/components/responses/kleem.generated_Error422'
        '429':
          $ref: '#/components/responses/kleem.generated_Error429'
        '500':
          $ref: '#/components/responses/kleem.generated_Error500'
        '502':
          $ref: '#/components/responses/kleem.generated_Error502'
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
  /kleem/chat/{sessionId}/message:
    post:
      operationId: كليم_-_الدردشة_Public_7b1da6
      tags:
      - كليم - الدردشة
      parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kleem.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/kleem.generated_Error400'
        '401':
          $ref: '#/components/responses/kleem.generated_Error401'
        '403':
          $ref: '#/components/responses/kleem.generated_Error403'
        '404':
          $ref: '#/components/responses/kleem.generated_Error404'
        '409':
          $ref: '#/components/responses/kleem.generated_Error409'
        '422':
          $ref: '#/components/responses/kleem.generated_Error422'
        '429':
          $ref: '#/components/responses/kleem.generated_Error429'
        '500':
          $ref: '#/components/responses/kleem.generated_Error500'
        '502':
          $ref: '#/components/responses/kleem.generated_Error502'
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
  /kleem/chat/{sessionId}/rate:
    post:
      operationId: كليم_-_الدردشة_Public_d9b0bf
      tags:
      - كليم - الدردشة
      parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kleem.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/kleem.generated_Error400'
        '401':
          $ref: '#/components/responses/kleem.generated_Error401'
        '403':
          $ref: '#/components/responses/kleem.generated_Error403'
        '404':
          $ref: '#/components/responses/kleem.generated_Error404'
        '409':
          $ref: '#/components/responses/kleem.generated_Error409'
        '422':
          $ref: '#/components/responses/kleem.generated_Error422'
        '429':
          $ref: '#/components/responses/kleem.generated_Error429'
        '500':
          $ref: '#/components/responses/kleem.generated_Error500'
        '502':
          $ref: '#/components/responses/kleem.generated_Error502'
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
  /kleem/chat/{sessionId}:
    get:
      operationId: كليم_-_الدردشة_Public_f4640f
      tags:
      - كليم - الدردشة
      parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kleem.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/kleem.generated_Error400'
        '401':
          $ref: '#/components/responses/kleem.generated_Error401'
        '403':
          $ref: '#/components/responses/kleem.generated_Error403'
        '404':
          $ref: '#/components/responses/kleem.generated_Error404'
        '409':
          $ref: '#/components/responses/kleem.generated_Error409'
        '422':
          $ref: '#/components/responses/kleem.generated_Error422'
        '429':
          $ref: '#/components/responses/kleem.generated_Error429'
        '500':
          $ref: '#/components/responses/kleem.generated_Error500'
        '502':
          $ref: '#/components/responses/kleem.generated_Error502'
      security:
      - BearerAuth: []
  /admin/kleem/settings/chat:
    get:
      operationId: كليم_-_إعدادات_البوت_ApiOperation_bcd4d6
      tags:
      - كليم - إعدادات البوت
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kleem.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/kleem.generated_Error400'
        '401':
          $ref: '#/components/responses/kleem.generated_Error401'
        '403':
          $ref: '#/components/responses/kleem.generated_Error403'
        '404':
          $ref: '#/components/responses/kleem.generated_Error404'
        '409':
          $ref: '#/components/responses/kleem.generated_Error409'
        '422':
          $ref: '#/components/responses/kleem.generated_Error422'
        '429':
          $ref: '#/components/responses/kleem.generated_Error429'
        '500':
          $ref: '#/components/responses/kleem.generated_Error500'
        '502':
          $ref: '#/components/responses/kleem.generated_Error502'
      security:
      - BearerAuth: []
    put:
      operationId: كليم_-_إعدادات_البوت_ApiOperation_0b0b14
      tags:
      - كليم - إعدادات البوت
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kleem.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/kleem.generated_Error400'
        '401':
          $ref: '#/components/responses/kleem.generated_Error401'
        '403':
          $ref: '#/components/responses/kleem.generated_Error403'
        '404':
          $ref: '#/components/responses/kleem.generated_Error404'
        '409':
          $ref: '#/components/responses/kleem.generated_Error409'
        '422':
          $ref: '#/components/responses/kleem.generated_Error422'
        '429':
          $ref: '#/components/responses/kleem.generated_Error429'
        '500':
          $ref: '#/components/responses/kleem.generated_Error500'
        '502':
          $ref: '#/components/responses/kleem.generated_Error502'
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
  /webhooks/kleem/conversation/{sessionId}:
    post:
      operationId: كليم_-_Webhooks_Public_bdc6c1
      tags:
      - كليم - Webhooks
      parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kleem.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/kleem.generated_Error400'
        '401':
          $ref: '#/components/responses/kleem.generated_Error401'
        '403':
          $ref: '#/components/responses/kleem.generated_Error403'
        '404':
          $ref: '#/components/responses/kleem.generated_Error404'
        '409':
          $ref: '#/components/responses/kleem.generated_Error409'
        '422':
          $ref: '#/components/responses/kleem.generated_Error422'
        '429':
          $ref: '#/components/responses/kleem.generated_Error429'
        '500':
          $ref: '#/components/responses/kleem.generated_Error500'
        '502':
          $ref: '#/components/responses/kleem.generated_Error502'
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
  /webhooks/kleem/bot-reply/{sessionId}:
    post:
      operationId: كليم_-_Webhooks_Public_d1be33
      tags:
      - كليم - Webhooks
      parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kleem.generated_ApiResponseAny'
        '400':
          $ref: '#/components/responses/kleem.generated_Error400'
        '401':
          $ref: '#/components/responses/kleem.generated_Error401'
        '403':
          $ref: '#/components/responses/kleem.generated_Error403'
        '404':
          $ref: '#/components/responses/kleem.generated_Error404'
        '409':
          $ref: '#/components/responses/kleem.generated_Error409'
        '422':
          $ref: '#/components/responses/kleem.generated_Error422'
        '429':
          $ref: '#/components/responses/kleem.generated_Error429'
        '500':
          $ref: '#/components/responses/kleem.generated_Error500'
        '502':
          $ref: '#/components/responses/kleem.generated_Error502'
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
components:
  schemas:
    ApiResponseBase:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          nullable: true
          example: null
        requestId:
          type: string
          nullable: true
          example: req_123
        timestamp:
          type: string
          format: date-time
          example: '2025-09-26T00:00:00.000Z'
      required:
      - success
      - timestamp
      additionalProperties: false
    ApiResponseAny:
      allOf:
      - $ref: '#/components/schemas/ApiResponseBase'
      - type: object
        properties:
          data:
            type: object
    PageInfo:
      type: object
      properties:
        nextCursor:
          type: string
          nullable: true
        previousCursor:
          type: string
          nullable: true
        hasNext:
          type: boolean
        hasPrev:
          type: boolean
        limit:
          type: integer
          minimum: 1
          maximum: 100
          example: 20
      required:
      - hasNext
      - hasPrev
      - limit
      additionalProperties: false
    CursorPageObject:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
        pageInfo:
          $ref: '#/components/schemas/PageInfo'
      required:
      - items
      - pageInfo
      additionalProperties: false
    ApiResponseCursorPage:
      allOf:
      - $ref: '#/components/schemas/ApiResponseBase'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/CursorPageObject'
    ErrorResponse:
      type: object
      properties:
        code:
          type: string
          example: VALIDATION_ERROR
        message:
          type: string
          example: Invalid request data
        details:
          oneOf:
          - type: array
            items:
              type: string
          - type: object
            additionalProperties: true
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string
          nullable: true
      required:
      - code
      - message
      - timestamp
      additionalProperties: false
    User:
      type: object
      required:
      - id
      - name
      - email
      - role
      - firstLogin
      - emailVerified
      properties:
        id:
          type: string
          example: 66f0c3a2b1
        name:
          type: string
          example: Ahmed
        email:
          type: string
          format: email
          example: user@example.com
        role:
          type: string
          enum:
          - ADMIN
          - MERCHANT
          - MEMBER
          example: MERCHANT
        merchantId:
          type: string
          nullable: true
          example: mrc_123
        firstLogin:
          type: boolean
          example: true
        emailVerified:
          type: boolean
          example: false
    TokenPair:
      type: object
      required:
      - accessToken
      - refreshToken
      - user
      properties:
        accessToken:
          type: string
          example: eyJhbGciOi...access
        refreshToken:
          type: string
          example: eyJhbGciOi...refresh
        user:
          $ref: '#/components/schemas/User'
    AccessOnly:
      type: object
      required:
      - accessToken
      - user
      properties:
        accessToken:
          type: string
          example: eyJhbGciOi...access
        user:
          $ref: '#/components/schemas/User'
    MessageResponse:
      type: object
      properties:
        status:
          type: string
          example: ok
        message:
          type: string
          example: Success
    ValidateResetResponse:
      type: object
      properties:
        valid:
          type: boolean
          example: true
    auth.fixed_ErrorResponse:
      $ref: '#/components/schemas/ApiError'
    RegisterDto:
      type: object
      required:
      - email
      - password
      - confirmPassword
      - name
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        confirmPassword:
          type: string
          minLength: 8
        name:
          type: string
          minLength: 3
    LoginDto:
      type: object
      required:
      - email
      - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    ResendVerificationDto:
      type: object
      required:
      - email
      properties:
        email:
          type: string
          format: email
    VerifyEmailDto:
      type: object
      required:
      - email
      - code
      properties:
        email:
          type: string
          format: email
        code:
          type: string
          minLength: 6
          maxLength: 6
    RequestPasswordResetDto:
      type: object
      required:
      - email
      properties:
        email:
          type: string
          format: email
    ResetPasswordDto:
      type: object
      required:
      - email
      - token
      - newPassword
      - confirmPassword
      properties:
        email:
          type: string
          format: email
        token:
          type: string
        newPassword:
          type: string
          minLength: 8
        confirmPassword:
          type: string
          minLength: 8
    ChangePasswordDto:
      type: object
      required:
      - currentPassword
      - newPassword
      - confirmPassword
      properties:
        currentPassword:
          type: string
        newPassword:
          type: string
          minLength: 8
        confirmPassword:
          type: string
          minLength: 8
    RefreshRequestDto:
      type: object
      properties:
        refreshToken:
          type: string
    LogoutRequestDto:
      type: object
      properties:
        refreshToken:
          type: string
    ApiSuccessBase:
      type: object
      required:
      - success
      - timestamp
      properties:
        success:
          type: boolean
          example: true
        data: {}
        requestId:
          type: string
          nullable: true
          example: req-abc123
        timestamp:
          type: string
          format: date-time
          example: '2025-09-25T19:45:00.000Z'
      description: Global success envelope returned by ResponseInterceptor. `data`
        contains the actual payload.
    ApiError:
      type: object
      required:
      - status
      - code
      - message
      - timestamp
      properties:
        status:
          type: integer
          example: 401
        code:
          type: string
          example: INVALID_TOKEN
        message:
          type: string
          example: توكن غير صحيح
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string
          nullable: true
        details:
          type: object
          additionalProperties: true
      description: Unified error contract produced by AllExceptionsFilter (non-wrapped).
    TokenPairResponse:
      allOf:
      - $ref: '#/components/schemas/ApiSuccessBase'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/TokenPair'
    AccessOnlyResponse:
      allOf:
      - $ref: '#/components/schemas/ApiSuccessBase'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/AccessOnly'
    MessageResponseEnvelope:
      allOf:
      - $ref: '#/components/schemas/ApiSuccessBase'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/MessageResponse'
    ValidateResetResponseEnvelope:
      allOf:
      - $ref: '#/components/schemas/ApiSuccessBase'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/ValidateResetResponse'
    catalog.generated_ApiResponseBase:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          nullable: true
          example: null
        requestId:
          type: string
          nullable: true
          example: req_123456789
        timestamp:
          type: string
          format: date-time
          example: '2025-09-26T00:00:00.000Z'
      required:
      - success
      - timestamp
      additionalProperties: false
    catalog.generated_ApiResponseAny:
      allOf:
      - $ref: '#/components/schemas/ApiResponseBase'
      - type: object
        properties:
          data:
            type: object
    catalog.generated_PageInfo:
      type: object
      properties:
        nextCursor:
          type: string
          nullable: true
        previousCursor:
          type: string
          nullable: true
        hasNext:
          type: boolean
        hasPrev:
          type: boolean
        limit:
          type: integer
          minimum: 1
          maximum: 100
          example: 20
      required:
      - hasNext
      - hasPrev
      - limit
      additionalProperties: false
    catalog.generated_CursorPageObject:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
        pageInfo:
          $ref: '#/components/schemas/PageInfo'
      required:
      - items
      - pageInfo
      additionalProperties: false
    catalog.generated_ApiResponseCursorPage:
      allOf:
      - $ref: '#/components/schemas/ApiResponseBase'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/CursorPageObject'
    catalog.generated_ErrorResponse:
      type: object
      properties:
        code:
          type: string
          example: VALIDATION_ERROR
        message:
          type: string
          example: Invalid request data
        details:
          oneOf:
          - type: array
            items:
              type: string
          - type: object
            additionalProperties: true
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string
          nullable: true
      required:
      - code
      - message
      - timestamp
      additionalProperties: false
    categories.fixed_ApiSuccessBase:
      type: object
      required:
      - success
      - timestamp
      properties:
        success:
          type: boolean
          example: true
        data: {}
        requestId:
          type: string
          nullable: true
          example: req-abc123
        timestamp:
          type: string
          format: date-time
          example: '2025-09-26T15:00:00.000Z'
      description: Global success envelope returned by ResponseInterceptor. `data`
        contains the actual payload.
    categories.fixed_ApiError:
      type: object
      required:
      - status
      - code
      - message
      - timestamp
      properties:
        status:
          type: integer
          example: 400
        code:
          type: string
          example: VALIDATION_ERROR
        message:
          type: string
          example: merchantId is required
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string
          nullable: true
        details:
          type: object
          additionalProperties: true
      description: Unified error contract produced by AllExceptionsFilter (non-wrapped).
    CreateCategoryDto:
      type: object
      properties:
        name:
          type: string
        merchantId:
          type: string
          description: Owning merchant id (ObjectId as string)
        parent:
          type: string
          nullable: true
          description: Parent category id (null for root)
        description:
          type: string
          nullable: true
        image:
          type: string
          nullable: true
        keywords:
          type: array
          items:
            type: string
        slug:
          type: string
          description: Unique among siblings
      required:
      - name
      - merchantId
    UpdateCategoryDto:
      allOf:
      - $ref: '#/components/schemas/CreateCategoryDto'
      description: All properties optional (partial update).
    Category:
      type: object
      properties:
        id:
          type: string
          example: 64f0a2...
        name:
          type: string
        merchantId:
          type: string
        parent:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        image:
          type: string
          nullable: true
        keywords:
          type: array
          items:
            type: string
        slug:
          type: string
        path:
          type: string
          example: المأكولات/القهوة
        depth:
          type: integer
          minimum: 0
          example: 0
        order:
          type: integer
          minimum: 0
          example: 0
        ancestors:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
      - id
      - name
      - merchantId
      - slug
      - createdAt
      - updatedAt
    BreadcrumbItem:
      type: object
      properties:
        name:
          type: string
        slug:
          type: string
        path:
          type: string
        depth:
          type: integer
          minimum: 0
      required:
      - name
      - slug
      - path
      - depth
    TreeCategory:
      type: object
      properties:
        _id:
          type: string
        parent:
          type: string
          nullable: true
        order:
          type: integer
          minimum: 0
        name:
          type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/TreeCategory'
      required:
      - _id
      - name
      - order
      - children
    MoveCategoryDto:
      type: object
      properties:
        parent:
          type: string
          nullable: true
          description: New parent id, or null for root
        afterId:
          type: string
          nullable: true
          description: Place after this sibling
        beforeId:
          type: string
          nullable: true
          description: Place before this sibling
        position:
          type: integer
          nullable: true
          minimum: 0
          description: Explicit index among siblings
    UploadImageResult:
      type: object
      properties:
        message:
          type: string
          example: تم رفع صورة الفئة بنجاح
        url:
          type: string
          format: uri
        categoryId:
          type: string
      required:
      - message
      - url
      - categoryId
    channels.fixed_ApiSuccessBase:
      type: object
      required:
      - success
      - timestamp
      properties:
        success:
          type: boolean
          example: true
        data: {}
        requestId:
          type: string
          nullable: true
          example: req-abc123
        timestamp:
          type: string
          format: date-time
          example: '2025-09-25T19:45:00.000Z'
      description: Global success envelope returned by ResponseInterceptor. `data`
        contains the actual payload.
    channels.fixed_ApiError:
      type: object
      required:
      - status
      - code
      - message
      - timestamp
      properties:
        status:
          type: integer
          example: 401
        code:
          type: string
          example: INVALID_TOKEN
        message:
          type: string
          example: توكن غير صحيح
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string
          nullable: true
        details:
          type: object
          additionalProperties: true
      description: Unified error contract produced by AllExceptionsFilter (non-wrapped).
    channels.fixed_ErrorResponse:
      $ref: '#/components/schemas/ApiError'
    ChannelProvider:
      type: string
      enum:
      - whatsapp_cloud
      - whatsapp_qr
      - telegram
      - webchat
      - email
      - sms
    Channel:
      type: object
      properties:
        id:
          type: string
          example: chn_123
        merchantId:
          type: string
          example: mrc_123
        provider:
          $ref: '#/components/schemas/ChannelProvider'
        name:
          type: string
          example: Main WhatsApp
        enabled:
          type: boolean
          example: true
        isDefault:
          type: boolean
          example: false
        config:
          type: object
          description: Provider-specific settings
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
      - id
      - merchantId
      - provider
      - name
    CreateChannelDto:
      type: object
      properties:
        merchantId:
          type: string
          example: mrc_123
        provider:
          $ref: '#/components/schemas/ChannelProvider'
        name:
          type: string
          example: Customer Support
        isDefault:
          type: boolean
        config:
          type: object
      required:
      - merchantId
      - provider
      - name
    UpdateChannelDto:
      type: object
      properties:
        name:
          type: string
        enabled:
          type: boolean
        isDefault:
          type: boolean
        config:
          type: object
        widgetSettings:
          type: object
          additionalProperties: true
    SendMessageDto:
      type: object
      properties:
        to:
          type: string
          example: '+966501234567'
        text:
          type: string
          example: Hello 👋
      required:
      - to
      - text
    ConnectActionDto:
      type: object
      properties:
        enable:
          type: boolean
          description: Enable/disable the channel connection
    ChannelsList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Channel'
        total:
          type: integer
          example: 1
        page:
          type: integer
          example: 1
        pageSize:
          type: integer
          example: 20
      required:
      - items
      - total
    ChannelStatus:
      type: object
      properties:
        connected:
          type: boolean
          example: true
        provider:
          $ref: '#/components/schemas/ChannelProvider'
        details:
          type: object
          additionalProperties: true
      required:
      - connected
    SendAck:
      type: object
      properties:
        ok:
          type: boolean
          example: true
      required:
      - ok
    channels.fixed_MessageResponse:
      type: object
      properties:
        message:
          type: string
          example: OK
      required:
      - message
    chat.fixed_ApiSuccessBase:
      type: object
      required:
      - success
      - timestamp
      properties:
        success:
          type: boolean
          example: true
        data: {}
        requestId:
          type: string
          nullable: true
          example: req-abc123
        timestamp:
          type: string
          format: date-time
          example: '2025-09-26T13:00:00.000Z'
      description: Global success envelope returned by ResponseInterceptor. `data`
        contains the actual payload.
    chat.fixed_ApiError:
      type: object
      required:
      - status
      - code
      - message
      - timestamp
      properties:
        status:
          type: integer
          example: 401
        code:
          type: string
          example: INVALID_TOKEN
        message:
          type: string
          example: توكن غير صحيح
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string
          nullable: true
        details:
          type: object
          additionalProperties: true
      description: Unified error contract produced by AllExceptionsFilter (non-wrapped).
    ChatWidgetSettings:
      type: object
      properties:
        merchantId:
          type: string
          example: mrc_123
        widgetSlug:
          type: string
          example: chat_abc123
        useStorefrontBrand:
          type: boolean
          example: true
        botName:
          type: string
          example: Kaleem Bot
        welcomeMessage:
          type: string
          example: يا هلا! كيف أقدر أساعدك؟
        greetingBubbleText:
          type: string
          nullable: true
        autoOpen:
          type: boolean
          example: false
        autoTagging:
          type: boolean
          example: false
        requireName:
          type: boolean
          example: false
        requirePhone:
          type: boolean
          example: false
        enabledChannels:
          type: array
          items:
            type: string
            enum:
            - webchat
            - whatsapp
            - telegram
        theme:
          type: object
          properties:
            primaryColor:
              type: string
              example: '#0ea5e9'
            backgroundColor:
              type: string
              example: '#ffffff'
            textColor:
              type: string
              example: '#111827'
        position:
          type: string
          enum:
          - bottom-right
          - bottom-left
          example: bottom-right
        embedMode:
          type: string
          enum:
          - bubble
          - iframe
          - bar
          - conversational
          example: bubble
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
      - merchantId
      - widgetSlug
      - botName
      - welcomeMessage
      - embedMode
      - isActive
      - createdAt
      - updatedAt
    UpdateWidgetSettingsDto:
      type: object
      description: All properties optional. Only provided fields will be updated.
      properties:
        useStorefrontBrand:
          type: boolean
        botName:
          type: string
        welcomeMessage:
          type: string
        greetingBubbleText:
          type: string
        autoOpen:
          type: boolean
        autoTagging:
          type: boolean
        requireName:
          type: boolean
        requirePhone:
          type: boolean
        enabledChannels:
          type: array
          items:
            type: string
            enum:
            - webchat
            - whatsapp
            - telegram
        theme:
          type: object
          properties:
            primaryColor:
              type: string
            backgroundColor:
              type: string
            textColor:
              type: string
        position:
          type: string
          enum:
          - bottom-right
          - bottom-left
        embedMode:
          type: string
          enum:
          - bubble
          - iframe
          - bar
          - conversational
        isActive:
          type: boolean
      additionalProperties: false
    EmbedSettingsDto:
      type: object
      properties:
        theme:
          $ref: '#/components/schemas/ChatWidgetSettings/properties/theme'
        position:
          $ref: '#/components/schemas/ChatWidgetSettings/properties/position'
        embedMode:
          $ref: '#/components/schemas/ChatWidgetSettings/properties/embedMode'
        isActive:
          $ref: '#/components/schemas/ChatWidgetSettings/properties/isActive'
    ShareUrlResponse:
      type: object
      properties:
        url:
          type: string
          example: https://share.example/chat_abc123
        widgetSlug:
          type: string
          example: chat_abc123
        merchantId:
          type: string
          example: mrc_123
        expiresAt:
          type: string
          format: date-time
          nullable: true
          example: null
        isActive:
          type: boolean
          example: true
      required:
      - url
      - widgetSlug
      - merchantId
      - isActive
    SlugResponse:
      type: object
      properties:
        message:
          type: string
          example: تم إنشاء slug فريد للودجة
        slug:
          type: string
          example: chat_xyz789
      required:
      - message
      - slug
    PublicWidgetSettingsResponse:
      type: object
      properties:
        widgetSlug:
          type: string
        merchantId:
          type: string
        theme:
          $ref: '#/components/schemas/ChatWidgetSettings/properties/theme'
        position:
          $ref: '#/components/schemas/ChatWidgetSettings/properties/position'
        embedMode:
          $ref: '#/components/schemas/ChatWidgetSettings/properties/embedMode'
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
      - widgetSlug
      - merchantId
      - embedMode
      - isActive
      - createdAt
      - updatedAt
    PublicWidgetStatusResponse:
      type: object
      properties:
        status:
          type: string
          enum:
          - active
          - waiting
          - assigned
        assignedAgent:
          type: object
          nullable: true
          properties:
            id:
              type: string
            name:
              type: string
            avatar:
              type: string
              nullable: true
      required:
      - status
    CreateSessionDto:
      type: object
      properties:
        visitorId:
          type: string
          description: Client-generated visitor/session identifier
        metadata:
          type: object
          additionalProperties: true
    CreateSessionResponse:
      type: object
      properties:
        sessionId:
          type: string
          example: sess_123
        widgetSlug:
          type: string
        visitorId:
          type: string
        status:
          type: string
          enum:
          - waiting
          - assigned
          - active
          example: waiting
        assignedAgent:
          type: object
          nullable: true
          properties:
            id:
              type: string
            name:
              type: string
            avatar:
              type: string
              nullable: true
        estimatedWaitTime:
          type: integer
          example: 60
        welcomeMessage:
          type: string
        createdAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
      required:
      - sessionId
      - widgetSlug
      - visitorId
      - status
      - estimatedWaitTime
      - welcomeMessage
      - createdAt
      - expiresAt
    documents.fixed_ApiSuccessBase:
      type: object
      required:
      - success
      - timestamp
      properties:
        success:
          type: boolean
          example: true
        data: {}
        requestId:
          type: string
          nullable: true
          example: req-abc123
        timestamp:
          type: string
          format: date-time
          example: '2025-09-26T17:00:00.000Z'
      description: Global success envelope returned by ResponseInterceptor. `data`
        contains the actual payload.
    documents.fixed_ApiError:
      type: object
      required:
      - status
      - code
      - message
      - timestamp
      properties:
        status:
          type: integer
          example: 400
        code:
          type: string
          example: VALIDATION_ERROR
        message:
          type: string
          example: المدخلات غير صحيحة
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string
          nullable: true
        details:
          type: object
          additionalProperties: true
      description: Unified error contract produced by AllExceptionsFilter (non-wrapped).
    Document:
      type: object
      properties:
        id:
          type: string
          example: doc_66f1a2b3c4d5e6f7g8h9i0j
        merchantId:
          type: string
          example: m_12345
        filename:
          type: string
          example: report.pdf
        fileType:
          type: string
          example: application/pdf
        storageKey:
          type: string
          example: m_12345/docs/2025/09/26/doc_66f1a2...pdf
        status:
          type: string
          enum:
          - pending
          - processing
          - completed
          - failed
          example: completed
        errorMessage:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
      - id
      - merchantId
      - filename
      - fileType
      - storageKey
      - status
      - createdAt
      - updatedAt
    DocumentItem:
      allOf:
      - $ref: '#/components/schemas/Document'
    PaginatedMeta:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        total:
          type: integer
          example: 120
        totalPages:
          type: integer
          example: 6
        hasNext:
          type: boolean
          example: true
        hasPrev:
          type: boolean
          example: false
      required:
      - page
      - limit
      - total
      - totalPages
      - hasNext
      - hasPrev
    PaginatedDocuments:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/DocumentItem'
        meta:
          $ref: '#/components/schemas/PaginatedMeta'
      required:
      - items
      - meta
    faq.fixed_ApiSuccessBase:
      type: object
      required:
      - success
      - timestamp
      properties:
        success:
          type: boolean
          example: true
        data: {}
        requestId:
          type: string
          nullable: true
          example: req-abc123
        timestamp:
          type: string
          format: date-time
          example: '2025-09-26T18:00:00.000Z'
      description: Global success envelope returned by ResponseInterceptor. `data`
        contains the actual payload.
    faq.fixed_ApiError:
      type: object
      required:
      - status
      - code
      - message
      - timestamp
      properties:
        status:
          type: integer
          example: 400
        code:
          type: string
          example: VALIDATION_ERROR
        message:
          type: string
          example: invalid id
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string
          nullable: true
        details:
          type: object
          additionalProperties: true
      description: Unified error contract produced by AllExceptionsFilter (non-wrapped).
    FaqStatusEnum:
      type: string
      enum:
      - pending
      - completed
      - failed
      - deleted
    FaqItem:
      type: object
      properties:
        _id:
          type: string
          example: 66f1a2b3c4d5e6f7a8b9c0d1
        question:
          type: string
          example: ما سياسة الاستبدال؟
        answer:
          type: string
          example: نقبل الاستبدال خلال 14 يومًا مع الفاتورة.
        status:
          $ref: '#/components/schemas/FaqStatusEnum'
        errorMessage:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
          nullable: true
      required:
      - _id
      - question
      - answer
      - status
    CreateFaqItem:
      type: object
      properties:
        question:
          type: string
        answer:
          type: string
      required:
      - question
      - answer
    BatchResult:
      type: object
      properties:
        success:
          type: boolean
          const: true
        queued:
          type: integer
          minimum: 0
        message:
          type: string
        ids:
          type: array
          items:
            type: string
      required:
      - success
      - queued
      - message
      - ids
    FaqStatusCounts:
      type: object
      properties:
        total:
          type: integer
        pending:
          type: integer
        completed:
          type: integer
        failed:
          type: integer
        deleted:
          type: integer
      required:
      - total
      - pending
      - completed
      - failed
      - deleted
    UpdateFaqDto:
      type: object
      properties:
        question:
          type: string
        answer:
          type: string
    UpdateResult:
      type: object
      properties:
        success:
          type: boolean
          const: true
      required:
      - success
    SoftDeleteResult:
      type: object
      properties:
        success:
          type: boolean
          const: true
        softDeleted:
          type: boolean
          const: true
      required:
      - success
      - softDeleted
    HardDeleteResult:
      type: object
      properties:
        success:
          type: boolean
          const: true
        deleted:
          type: integer
          const: 1
      required:
      - success
      - deleted
    DeleteAllSoft:
      type: object
      properties:
        success:
          type: boolean
          const: true
        softDeleted:
          type: integer
          minimum: 0
        mode:
          type: string
          enum:
          - soft
      required:
      - success
      - softDeleted
      - mode
    DeleteAllHard:
      type: object
      properties:
        success:
          type: boolean
          const: true
        deleted:
          type: integer
          minimum: 0
        mode:
          type: string
          enum:
          - hard
      required:
      - success
      - deleted
      - mode
    SimpleMessage:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
      required:
      - success
      - message
    instructions.fixed_ApiSuccessBase:
      type: object
      required:
      - success
      - timestamp
      properties:
        success:
          type: boolean
          example: true
        data: {}
        requestId:
          type: string
          nullable: true
          example: req-abc123
        timestamp:
          type: string
          format: date-time
          example: '2025-09-26T18:30:00.000Z'
      description: Global success envelope returned by ResponseInterceptor. `data`
        contains the actual payload.
    instructions.fixed_ApiError:
      type: object
      required:
      - status
      - code
      - message
      - timestamp
      properties:
        status:
          type: integer
          example: 400
        code:
          type: string
          example: VALIDATION_ERROR
        message:
          type: string
          example: غير مخوّل
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string
          nullable: true
        details:
          type: object
          additionalProperties: true
      description: Unified error contract produced by AllExceptionsFilter (non-wrapped).
    InstructionItem:
      type: object
      properties:
        _id:
          type: string
          example: 66f1a2b3c4d5e6f7a8b9c0d1
        merchantId:
          type: string
          nullable: true
          example: m_12345
        instruction:
          type: string
          example: إذا سأل العميل عن الخصومات، اعرض كود SUMMER25.
        relatedReplies:
          type: array
          items:
            type: string
          example:
          - الخصم؟
          - هل في كوبون؟
        type:
          type: string
          enum:
          - auto
          - manual
          example: auto
        active:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
      required:
      - _id
      - instruction
      - type
      - active
    CreateInstructionDto:
      type: object
      properties:
        instruction:
          type: string
          description: نص التوجيه
        merchantId:
          type: string
          description: ADMIN فقط؛ يُتجاهَل لغير الـ ADMIN
        relatedReplies:
          type: array
          items:
            type: string
        type:
          type: string
          enum:
          - auto
          - manual
      required:
      - instruction
    UpdateInstructionDto:
      type: object
      properties:
        instruction:
          type: string
        active:
          type: boolean
        relatedReplies:
          type: array
          items:
            type: string
    SuggestionItem:
      type: object
      properties:
        badReply:
          type: string
        count:
          type: integer
          minimum: 0
        instruction:
          type: string
      required:
      - badReply
      - count
      - instruction
    SuggestionsResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/SuggestionItem'
      required:
      - items
    GenerateFromBadRepliesRequest:
      type: object
      properties:
        badReplies:
          type: array
          items:
            type: string
      required:
      - badReplies
    GenerateFromBadRepliesResult:
      type: object
      properties:
        results:
          type: array
          items:
            type: object
            properties:
              badReply:
                type: string
              instruction:
                type: string
            required:
            - badReply
            - instruction
      required:
      - results
    integrations.generated_ApiResponseBase:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          nullable: true
          example: null
        requestId:
          type: string
          nullable: true
          example: req_123
        timestamp:
          type: string
          format: date-time
          example: '2025-09-26T00:00:00.000Z'
      required:
      - success
      - timestamp
      additionalProperties: false
    integrations.generated_ApiResponseAny:
      allOf:
      - $ref: '#/components/schemas/ApiResponseBase'
      - type: object
        properties:
          data:
            type: object
    integrations.generated_PageInfo:
      type: object
      properties:
        nextCursor:
          type: string
          nullable: true
        previousCursor:
          type: string
          nullable: true
        hasNext:
          type: boolean
        hasPrev:
          type: boolean
        limit:
          type: integer
          minimum: 1
          maximum: 100
          example: 20
      required:
      - hasNext
      - hasPrev
      - limit
      additionalProperties: false
    integrations.generated_CursorPageObject:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
        pageInfo:
          $ref: '#/components/schemas/PageInfo'
      required:
      - items
      - pageInfo
      additionalProperties: false
    integrations.generated_ApiResponseCursorPage:
      allOf:
      - $ref: '#/components/schemas/ApiResponseBase'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/CursorPageObject'
    integrations.generated_ErrorResponse:
      type: object
      properties:
        code:
          type: string
          example: VALIDATION_ERROR
        message:
          type: string
          example: Invalid request data
        details:
          oneOf:
          - type: array
            items:
              type: string
          - type: object
            additionalProperties: true
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string
          nullable: true
      required:
      - code
      - message
      - timestamp
      additionalProperties: false
    knowledge.fixed_ApiSuccessBase:
      type: object
      required:
      - success
      - timestamp
      properties:
        success:
          type: boolean
          example: true
        data: {}
        requestId:
          type: string
          nullable: true
          example: req-abc123
        timestamp:
          type: string
          format: date-time
          example: '2025-09-26T17:30:00.000Z'
      description: Global success envelope returned by ResponseInterceptor. `data`
        contains the actual payload.
    knowledge.fixed_ApiError:
      type: object
      required:
      - status
      - code
      - message
      - timestamp
      properties:
        status:
          type: integer
          example: 400
        code:
          type: string
          example: VALIDATION_ERROR
        message:
          type: string
          example: invalid id
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string
          nullable: true
        details:
          type: object
          additionalProperties: true
      description: Unified error contract produced by AllExceptionsFilter (non-wrapped).
    AddUrlsRequest:
      type: object
      properties:
        urls:
          type: array
          items:
            type: string
            format: uri
          description: قائمة الروابط المعرفية
      required:
      - urls
    AddUrlsResult:
      type: object
      properties:
        success:
          type: boolean
          example: true
        count:
          type: integer
          example: 3
        message:
          type: string
          example: Queued 3 URL(s)
      required:
      - success
      - count
      - message
    UrlStatusEnum:
      type: string
      enum:
      - pending
      - completed
      - failed
    SourceUrlListItem:
      type: object
      properties:
        _id:
          type: string
          example: 66f1a2b3c4d5e6f7a8b9c0d1
        url:
          type: string
          format: uri
        status:
          $ref: '#/components/schemas/UrlStatusEnum'
        errorMessage:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
      required:
      - _id
      - url
      - status
      - createdAt
    UrlsStatusItem:
      type: object
      properties:
        id:
          type: string
        url:
          type: string
          format: uri
        status:
          $ref: '#/components/schemas/UrlStatusEnum'
        errorMessage:
          type: string
          nullable: true
        textLength:
          type: integer
          minimum: 0
      required:
      - id
      - url
      - status
      - textLength
    UrlsStatus:
      type: object
      properties:
        total:
          type: integer
        pending:
          type: integer
        completed:
          type: integer
        failed:
          type: integer
        urls:
          type: array
          items:
            $ref: '#/components/schemas/UrlsStatusItem'
      required:
      - total
      - pending
      - completed
      - failed
      - urls
    DeleteResult:
      type: object
      properties:
        success:
          type: boolean
          const: true
        deleted:
          type: integer
          const: 1
        url:
          type: string
          format: uri
      required:
      - success
      - deleted
      - url
    DeleteAllResult:
      type: object
      properties:
        success:
          type: boolean
          const: true
        deleted:
          type: integer
          description: Number of vector chunks deleted
        urls:
          type: integer
          description: Number of URL records deleted
      required:
      - success
      - deleted
      - urls
    knowledge.fixed_SimpleMessage:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
      required:
      - success
      - message
    leads.fixed_ApiSuccessBase:
      type: object
      required:
      - success
      - timestamp
      properties:
        success:
          type: boolean
          example: true
        data: {}
        requestId:
          type: string
          nullable: true
          example: req-abc123
        timestamp:
          type: string
          format: date-time
          example: '2025-09-26T14:00:00.000Z'
      description: Global success envelope returned by ResponseInterceptor. `data`
        contains the actual payload.
    leads.fixed_ApiError:
      type: object
      required:
      - status
      - code
      - message
      - timestamp
      properties:
        status:
          type: integer
          example: 401
        code:
          type: string
          example: INVALID_TOKEN
        message:
          type: string
          example: توكن غير صحيح
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string
          nullable: true
        details:
          type: object
          additionalProperties: true
      description: Unified error contract produced by AllExceptionsFilter (non-wrapped).
    CreateLeadDto:
      type: object
      properties:
        sessionId:
          type: string
          description: Session identifier
          example: session_123456789
        data:
          type: object
          description: Form key/value object
          additionalProperties: true
          example:
            name: Ali
            phone: +9665xxxxxxx
            interestedIn: Coffee machine
        source:
          type: string
          nullable: true
          example: الموقع الإلكتروني
      required:
      - sessionId
      - data
    Lead:
      type: object
      properties:
        id:
          type: string
          example: lead_64f0a2...
          description: Document id (stringified)
        merchantId:
          type: string
          example: mrc_123
        sessionId:
          type: string
          example: session_123456789
        data:
          type: object
          additionalProperties: true
        source:
          type: string
          nullable: true
        phoneNormalized:
          type: string
          nullable: true
          example: 9665xxxxxxx
        name:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
      - merchantId
      - sessionId
      - data
    LeadList:
      type: array
      items:
        $ref: '#/components/schemas/Lead'
    media.fixed_ApiSuccessBase:
      type: object
      required:
      - success
      - timestamp
      properties:
        success:
          type: boolean
          example: true
        data: {}
        requestId:
          type: string
          nullable: true
          example: req-abc123
        timestamp:
          type: string
          format: date-time
          example: '2025-09-26T16:30:00.000Z'
      description: Global success envelope returned by ResponseInterceptor. `data`
        contains the actual payload.
    media.fixed_ApiError:
      type: object
      required:
      - status
      - code
      - message
      - timestamp
      properties:
        status:
          type: integer
          example: 400
        code:
          type: string
          example: VALIDATION_ERROR
        message:
          type: string
          example: merchantId is required
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string
          nullable: true
        details:
          type: object
          additionalProperties: true
      description: Unified error contract produced by AllExceptionsFilter (non-wrapped).
    MediaType:
      type: string
      enum:
      - text
      - voice
      - audio
      - photo
      - image
      - document
      - pdf
    MediaHandlerDto:
      type: object
      description: Generic media handling descriptor accompanying uploads or remote
        URLs.
      properties:
        type:
          $ref: '#/components/schemas/MediaType'
        fileUrl:
          type: string
          format: uri
          description: Remote file URL (if not using multipart upload).
        sessionId:
          type: string
          description: Chat/session id (optional).
        channel:
          type: string
          enum:
          - whatsapp
          - telegram
          - webchat
          - other
        mimeType:
          type: string
          description: Explicit MIME override (optional).
      required:
      - type
    MediaHandleResult:
      type: object
      properties:
        text:
          type: string
          description: Extracted text content.
        meta:
          type: object
          additionalProperties: true
      required:
      - text
    SoftDeleteDto:
      type: object
      properties:
        reason:
          type: string
    ForceDeleteDto:
      type: object
      properties:
        confirm:
          type: string
    UpdateProductSourceDto:
      type: object
      properties:
        confirmPassword:
          type: string
    WebhookInfo:
      type: object
      properties:
        hookUrl:
          type: string
        telegramResponse:
          type: string
      required:
      - hookUrl
      - telegramResponse
    OnboardingResponseDto:
      type: object
      properties:
        message:
          type: string
      required:
      - message
    PromptValidator:
      type: object
      properties:
        valid:
          type: boolean
        message:
          type: string
      required:
      - valid
    merchants.fixed_ApiSuccessBase:
      type: object
      required:
      - success
      - timestamp
      properties:
        success:
          type: boolean
          example: true
        data: {}
        requestId:
          type: string
          nullable: true
          example: req-abc123
        timestamp:
          type: string
          format: date-time
          example: '2025-09-25T19:45:00.000Z'
      description: Global success envelope returned by ResponseInterceptor. `data`
        contains the actual payload.
    merchants.fixed_ApiError:
      type: object
      required:
      - status
      - code
      - message
      - timestamp
      properties:
        status:
          type: integer
          example: 401
        code:
          type: string
          example: INVALID_TOKEN
        message:
          type: string
          example: توكن غير صحيح
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string
          nullable: true
        details:
          type: object
          additionalProperties: true
      description: Unified error contract produced by AllExceptionsFilter (non-wrapped).
    merchants.fixed_ErrorResponse:
      $ref: '#/components/schemas/ApiError'
    Merchant:
      type: object
      properties:
        id:
          type: string
          example: mrc_123
        ownerUserId:
          type: string
          example: u_123
        name:
          type: string
          example: Acme Store
        slug:
          type: string
          example: acme
        deleted:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
      - id
      - name
      - slug
    MerchantsList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Merchant'
        total:
          type: integer
          example: 1
        page:
          type: integer
          example: 1
        pageSize:
          type: integer
          example: 20
      required:
      - items
      - total
    merchants.fixed_MessageResponse:
      type: object
      properties:
        message:
          type: string
          example: OK
      required:
      - message
    SlugAvailability:
      type: object
      properties:
        available:
          type: boolean
          example: true
      required:
      - available
    MerchantChecklist:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
              label:
                type: string
              completed:
                type: boolean
              skipped:
                type: boolean
        completedCount:
          type: integer
    MerchantSubscriptionStatus:
      type: object
      properties:
        active:
          type: boolean
        plan:
          type: string
        renewalDate:
          type: string
          format: date-time
      required:
      - active
    AiStoreContext:
      type: object
      additionalProperties: true
      description: AI store context key-values used to ground the assistant.
    MerchantPromptQuickConfig:
      type: object
      properties:
        tone:
          type: string
          example: friendly
        language:
          type: string
          example: ar
        styleHints:
          type: array
          items:
            type: string
    MerchantPromptAdvancedTemplate:
      type: object
      properties:
        template:
          type: string
        updatedAt:
          type: string
          format: date-time
      required:
      - template
    MerchantPromptAdvancedVersion:
      type: object
      properties:
        index:
          type: integer
        template:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
      - index
      - template
    MerchantFinalPrompt:
      type: object
      properties:
        prompt:
          type: string
      required:
      - prompt
    MerchantPromptPreviewResponse:
      type: object
      properties:
        preview:
          type: string
      required:
      - preview
    MerchantEnvelope:
      allOf:
      - $ref: '#/components/schemas/ApiSuccessBase'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/Merchant'
    MerchantsListEnvelope:
      allOf:
      - $ref: '#/components/schemas/ApiSuccessBase'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/MerchantsList'
    MessageEnvelope:
      allOf:
      - $ref: '#/components/schemas/ApiSuccessBase'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/MessageResponse'
    SlugAvailabilityEnvelope:
      allOf:
      - $ref: '#/components/schemas/ApiSuccessBase'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/SlugAvailability'
    ChecklistEnvelope:
      allOf:
      - $ref: '#/components/schemas/ApiSuccessBase'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/MerchantChecklist'
    SubscriptionStatusEnvelope:
      allOf:
      - $ref: '#/components/schemas/ApiSuccessBase'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/MerchantSubscriptionStatus'
    AiStoreContextEnvelope:
      allOf:
      - $ref: '#/components/schemas/ApiSuccessBase'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/AiStoreContext'
    OnboardingEnvelope:
      allOf:
      - $ref: '#/components/schemas/ApiSuccessBase'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/OnboardingResponseDto'
    QuickConfigEnvelope:
      allOf:
      - $ref: '#/components/schemas/ApiSuccessBase'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/MerchantPromptQuickConfig'
    AdvancedTemplateEnvelope:
      allOf:
      - $ref: '#/components/schemas/ApiSuccessBase'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/MerchantPromptAdvancedTemplate'
    AdvancedVersionsEnvelope:
      allOf:
      - $ref: '#/components/schemas/ApiSuccessBase'
      - type: object
        properties:
          data:
            type: object
            properties:
              versions:
                type: array
                items:
                  $ref: '#/components/schemas/MerchantPromptAdvancedVersion'
            required:
            - versions
    FinalPromptEnvelope:
      allOf:
      - $ref: '#/components/schemas/ApiSuccessBase'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/MerchantFinalPrompt'
    PreviewEnvelope:
      allOf:
      - $ref: '#/components/schemas/ApiSuccessBase'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/MerchantPromptPreviewResponse'
    messaging.fixed_ApiSuccessBase:
      type: object
      required:
      - success
      - timestamp
      properties:
        success:
          type: boolean
          example: true
        data: {}
        requestId:
          type: string
          nullable: true
          example: req-abc123
        timestamp:
          type: string
          format: date-time
          example: '2025-09-25T19:45:00.000Z'
      description: Global success envelope returned by ResponseInterceptor. `data`
        contains the actual payload.
    messaging.fixed_ApiError:
      type: object
      required:
      - status
      - code
      - message
      - timestamp
      properties:
        status:
          type: integer
          example: 401
        code:
          type: string
          example: INVALID_TOKEN
        message:
          type: string
          example: توكن غير صحيح
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string
          nullable: true
        details:
          type: object
          additionalProperties: true
      description: Unified error contract produced by AllExceptionsFilter (non-wrapped).
    messaging.fixed_ErrorResponse:
      $ref: '#/components/schemas/ApiError'
    MessageRole:
      type: string
      enum:
      - customer
      - bot
      - agent
    SingleMessage:
      type: object
      properties:
        _id:
          type: string
          example: 60d0fe4f5311236168a109ca
        role:
          $ref: '#/components/schemas/MessageRole'
        text:
          type: string
          example: مرحباً، كيف يمكنني مساعدتك؟
        rating:
          type: integer
          nullable: true
          description: 0=negative,1=positive (if rated)
        feedback:
          type: string
          nullable: true
          description: Optional feedback when negative
      required:
      - _id
      - role
      - text
    MessageSession:
      type: object
      properties:
        id:
          type: string
          example: sess_123
        merchantId:
          type: string
          example: mrc_123
        sessionId:
          type: string
          example: 9665xxxxxxx
        channel:
          type: string
          enum:
          - whatsapp
          - telegram
          - webchat
        handoverToAgent:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        messages:
          type: array
          items:
            $ref: '#/components/schemas/SingleMessage'
      required:
      - merchantId
      - sessionId
      - channel
      - messages
    MessageItemDto:
      type: object
      properties:
        role:
          $ref: '#/components/schemas/MessageRole'
        text:
          type: string
      required:
      - role
      - text
    CreateMessageDto:
      type: object
      properties:
        merchantId:
          type: string
        sessionId:
          type: string
        channel:
          type: string
          enum:
          - whatsapp
          - telegram
          - webchat
        messages:
          type: array
          items:
            $ref: '#/components/schemas/MessageItemDto'
        meta:
          type: object
          additionalProperties: true
      required:
      - merchantId
      - sessionId
      - channel
      - messages
    UpdateMessageDto:
      type: object
      description: Partial update of a session; actual fields depend on implementation.
      additionalProperties: true
    RateMessageDto:
      type: object
      properties:
        rating:
          type: integer
          enum:
          - 0
          - 1
          description: 1 positive, 0 negative
        feedback:
          type: string
          nullable: true
      required:
      - rating
    SessionsList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/MessageSession'
        total:
          type: integer
          example: 1
        page:
          type: integer
          example: 1
        pageSize:
          type: integer
          example: 20
      required:
      - items
      - total
    messaging.fixed_MessageResponse:
      type: object
      properties:
        message:
          type: string
          example: OK
      required:
      - message
    DeletedAck:
      type: object
      properties:
        deleted:
          type: boolean
          example: true
      required:
      - deleted
    BadBotInstructions:
      type: object
      properties:
        items:
          type: array
          items:
            type: string
      required:
      - items
    GenerateInstructionsResponse:
      type: object
      properties:
        instructions:
          type: array
          items:
            type: string
      required:
      - instructions
    n8n.generated_ApiResponseBase:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          nullable: true
          example: null
        requestId:
          type: string
          nullable: true
          example: req_123456789
        timestamp:
          type: string
          format: date-time
          example: '2025-09-26T00:00:00.000Z'
      required:
      - success
      - timestamp
      additionalProperties: false
    n8n.generated_ApiResponseAny:
      allOf:
      - $ref: '#/components/schemas/ApiResponseBase'
      - type: object
        properties:
          data:
            type: object
    n8n.generated_PageInfo:
      type: object
      properties:
        nextCursor:
          type: string
          nullable: true
        previousCursor:
          type: string
          nullable: true
        hasNext:
          type: boolean
        hasPrev:
          type: boolean
        limit:
          type: integer
          minimum: 1
          maximum: 100
          example: 20
      required:
      - hasNext
      - hasPrev
      - limit
      additionalProperties: false
    n8n.generated_CursorPageObject:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
        pageInfo:
          $ref: '#/components/schemas/PageInfo'
      required:
      - items
      - pageInfo
      additionalProperties: false
    n8n.generated_ApiResponseCursorPage:
      allOf:
      - $ref: '#/components/schemas/ApiResponseBase'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/CursorPageObject'
    n8n.generated_ErrorResponse:
      type: object
      properties:
        code:
          type: string
          example: VALIDATION_ERROR
        message:
          type: string
          example: Invalid request data
        details:
          oneOf:
          - type: array
            items:
              type: string
          - type: object
            additionalProperties: true
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string
          nullable: true
      required:
      - code
      - message
      - timestamp
      additionalProperties: false
    notifications.updated_ApiResponseBase:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          nullable: true
          example: null
        requestId:
          type: string
          nullable: true
          example: req_123456789
        timestamp:
          type: string
          format: date-time
          example: '2025-09-26T00:00:00.000Z'
      required:
      - success
      - timestamp
      additionalProperties: false
    notifications.updated_ApiResponseAny:
      allOf:
      - $ref: '#/components/schemas/ApiResponseBase'
      - type: object
        properties:
          data:
            type: object
    notifications.updated_PageInfo:
      type: object
      properties:
        nextCursor:
          type: string
          nullable: true
        previousCursor:
          type: string
          nullable: true
        hasNext:
          type: boolean
        hasPrev:
          type: boolean
        limit:
          type: integer
          minimum: 1
          maximum: 100
          example: 20
      required:
      - hasNext
      - hasPrev
      - limit
      additionalProperties: false
    notifications.updated_CursorPageObject:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
        pageInfo:
          $ref: '#/components/schemas/PageInfo'
      required:
      - items
      - pageInfo
      additionalProperties: false
    notifications.updated_ApiResponseCursorPage:
      allOf:
      - $ref: '#/components/schemas/ApiResponseBase'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/CursorPageObject'
    notifications.updated_ErrorResponse:
      type: object
      properties:
        code:
          type: string
          example: VALIDATION_ERROR
        message:
          type: string
          example: Invalid request data
        details:
          oneOf:
          - type: array
            items:
              type: string
          - type: object
            additionalProperties: true
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string
          nullable: true
      required:
      - code
      - message
      - timestamp
      additionalProperties: false
    offers.fixed_ApiSuccessBase:
      type: object
      required:
      - success
      - timestamp
      properties:
        success:
          type: boolean
          example: true
        data: {}
        requestId:
          type: string
          nullable: true
          example: req-abc123
        timestamp:
          type: string
          format: date-time
          example: '2025-09-26T16:00:00.000Z'
      description: Global success envelope returned by ResponseInterceptor. `data`
        contains the actual payload.
    offers.fixed_ApiError:
      type: object
      required:
      - status
      - code
      - message
      - timestamp
      properties:
        status:
          type: integer
          example: 400
        code:
          type: string
          example: VALIDATION_ERROR
        message:
          type: string
          example: merchantId is required
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string
          nullable: true
        details:
          type: object
          additionalProperties: true
      description: Unified error contract produced by AllExceptionsFilter (non-wrapped).
    Offer:
      type: object
      properties:
        id:
          type: string
          example: prd_64f0a2...
        name:
          type: string
          example: قهوة عربية فاخرة
        slug:
          type: string
          example: arabic-coffee-premium
        priceOld:
          type: number
          nullable: true
          example: 120
        priceNew:
          type: number
          nullable: true
          example: 90
        priceEffective:
          type: number
          example: 90
          description: If offer is active uses newPrice, else falls back to product
            price
        currency:
          type: string
          example: SAR
        discountPct:
          type: integer
          nullable: true
          example: 25
        url:
          type: string
          nullable: true
          example: https://merchant.example.com/p/arabic-coffee-premium
        isActive:
          type: boolean
          example: true
        period:
          type: object
          properties:
            startAt:
              type: string
              format: date-time
              nullable: true
            endAt:
              type: string
              format: date-time
              nullable: true
        image:
          type: string
          format: uri
          nullable: true
          example: https://cdn.example.com/p/arabic-coffee-premium.webp
      required:
      - id
      - name
      - priceEffective
      - isActive
      - period
    plans.updated_ApiResponseBase:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          nullable: true
          example: null
        requestId:
          type: string
          nullable: true
          example: req_123456789
        timestamp:
          type: string
          format: date-time
          example: '2025-09-26T00:00:00.000Z'
      required:
      - success
      - timestamp
      additionalProperties: false
    plans.updated_ApiResponseAny:
      allOf:
      - $ref: '#/components/schemas/ApiResponseBase'
      - type: object
        properties:
          data:
            type: object
    plans.updated_PageInfo:
      type: object
      properties:
        nextCursor:
          type: string
          nullable: true
        previousCursor:
          type: string
          nullable: true
        hasNext:
          type: boolean
        hasPrev:
          type: boolean
        limit:
          type: integer
          minimum: 1
          maximum: 100
          example: 20
      required:
      - hasNext
      - hasPrev
      - limit
      additionalProperties: false
    plans.updated_CursorPageObject:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
        pageInfo:
          $ref: '#/components/schemas/PageInfo'
      required:
      - items
      - pageInfo
      additionalProperties: false
    plans.updated_ApiResponseCursorPage:
      allOf:
      - $ref: '#/components/schemas/ApiResponseBase'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/CursorPageObject'
    plans.updated_ErrorResponse:
      type: object
      properties:
        code:
          type: string
          example: VALIDATION_ERROR
        message:
          type: string
          example: Invalid request data
        details:
          oneOf:
          - type: array
            items:
              type: string
          - type: object
            additionalProperties: true
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string
          nullable: true
      required:
      - code
      - message
      - timestamp
      additionalProperties: false
    products.fixed_ApiSuccessBase:
      type: object
      required:
      - success
      - timestamp
      properties:
        success:
          type: boolean
          example: true
        data: {}
        requestId:
          type: string
          nullable: true
          example: req-abc123
        timestamp:
          type: string
          format: date-time
          example: '2025-09-26T10:00:00.000Z'
      description: Global success envelope returned by ResponseInterceptor. `data`
        contains the actual payload.
    products.fixed_ApiError:
      type: object
      required:
      - status
      - code
      - message
      - timestamp
      properties:
        status:
          type: integer
          example: 401
        code:
          type: string
          example: INVALID_TOKEN
        message:
          type: string
          example: توكن غير صحيح
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string
          nullable: true
        details:
          type: object
          additionalProperties: true
      description: Unified error contract produced by AllExceptionsFilter (non-wrapped).
    products.fixed_ErrorResponse:
      $ref: '#/components/schemas/ApiError'
    Currency:
      type: string
      enum:
      - SAR
      - USD
      - AED
      - EUR
    Product:
      type: object
      properties:
        _id:
          type: string
          example: 66fa1f5f9a8e6f0012d3c111
        merchantId:
          type: string
          example: mrc_123
        name:
          type: string
          example: Premium Coffee
        description:
          type: string
          example: Rich arabica beans.
        price:
          type: number
          format: double
          example: 29.99
        salePrice:
          type: number
          format: double
          nullable: true
          example: 24.99
        currency:
          $ref: '#/components/schemas/Currency'
        imageUrls:
          type: array
          items:
            type: string
            format: uri
        status:
          type: string
          enum:
          - active
          - inactive
          - out_of_stock
          example: active
        isAvailable:
          type: boolean
          example: true
        categoryId:
          type: string
          nullable: true
        sku:
          type: string
          nullable: true
        externalId:
          type: string
          nullable: true
        source:
          type: string
          enum:
          - manual
          - api
          example: manual
        hasOffer:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        slug:
          type: string
          example: premium-coffee
        storefrontSlug:
          type: string
          example: my-store
        storefrontDomain:
          type: string
          example: my-store.com
      required:
      - _id
      - merchantId
      - name
      - price
      - currency
      - status
    CreateProductDto:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: double
        salePrice:
          type: number
          format: double
        currency:
          $ref: '#/components/schemas/Currency'
        imageUrls:
          type: array
          items:
            type: string
            format: uri
        categoryId:
          type: string
        sku:
          type: string
        externalId:
          type: string
        sourceUrl:
          type: string
          format: uri
        status:
          type: string
          enum:
          - active
          - inactive
          - out_of_stock
        isAvailable:
          type: boolean
        slug:
          type: string
        storefrontSlug:
          type: string
        storefrontDomain:
          type: string
      required:
      - name
      - price
      - currency
    UpdateProductDto:
      type: object
      description: Partial update of a product
      additionalProperties: true
    ProductsList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
      required:
      - items
      - meta
    PaginationMeta:
      type: object
      properties:
        nextCursor:
          type: string
          nullable: true
          example: eyJ0IjoiMjAyNS0wOS0yNlQxMDozMDowMFoiLCJpZCI6IjY2ZmEifQ==
        hasMore:
          type: boolean
          example: true
        count:
          type: integer
          example: 20
      required:
      - hasMore
      - count
    products.fixed_MessageResponse:
      type: object
      properties:
        message:
          type: string
          example: OK
      required:
      - message
    UploadImagesResult:
      type: object
      properties:
        urls:
          type: array
          items:
            type: string
            format: uri
        count:
          type: integer
        accepted:
          type: integer
        remaining:
          type: integer
      required:
      - urls
      - count
      - accepted
      - remaining
    ProductSetupConfigDto:
      type: object
      properties:
        storeType:
          type: string
          enum:
          - traditional
          - ecommerce
        provider:
          type: string
          enum:
          - zid
          - salla
          - shopify
          - custom
        apiUrl:
          type: string
        accessToken:
          type: string
        hasApi:
          type: boolean
      required:
      - storeType
      - hasApi
    public.generated_ApiResponseBase:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          nullable: true
          example: null
        requestId:
          type: string
          nullable: true
          example: req_123456789
        timestamp:
          type: string
          format: date-time
          example: '2025-09-26T00:00:00.000Z'
      required:
      - success
      - timestamp
      additionalProperties: false
    public.generated_ApiResponseAny:
      allOf:
      - $ref: '#/components/schemas/ApiResponseBase'
      - type: object
        properties:
          data:
            type: object
    public.generated_PageInfo:
      type: object
      properties:
        nextCursor:
          type: string
          nullable: true
        previousCursor:
          type: string
          nullable: true
        hasNext:
          type: boolean
        hasPrev:
          type: boolean
        limit:
          type: integer
          minimum: 1
          maximum: 100
          example: 20
      required:
      - hasNext
      - hasPrev
      - limit
      additionalProperties: false
    public.generated_CursorPageObject:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
        pageInfo:
          $ref: '#/components/schemas/PageInfo'
      required:
      - items
      - pageInfo
      additionalProperties: false
    public.generated_ApiResponseCursorPage:
      allOf:
      - $ref: '#/components/schemas/ApiResponseBase'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/CursorPageObject'
    public.generated_ErrorResponse:
      type: object
      properties:
        code:
          type: string
          example: VALIDATION_ERROR
        message:
          type: string
          example: Invalid request data
        details:
          oneOf:
          - type: array
            items:
              type: string
          - type: object
            additionalProperties: true
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string
          nullable: true
      required:
      - code
      - message
      - timestamp
      additionalProperties: false
    storefront.fixed_ApiSuccessBase:
      type: object
      required:
      - success
      - timestamp
      properties:
        success:
          type: boolean
          example: true
        data: {}
        requestId:
          type: string
          nullable: true
          example: req-abc123
        timestamp:
          type: string
          format: date-time
          example: '2025-09-26T13:30:00.000Z'
      description: Global success envelope returned by ResponseInterceptor. `data`
        contains the actual payload.
    storefront.fixed_ApiError:
      type: object
      required:
      - status
      - code
      - message
      - timestamp
      properties:
        status:
          type: integer
          example: 401
        code:
          type: string
          example: INVALID_TOKEN
        message:
          type: string
          example: توكن غير صحيح
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string
          nullable: true
        details:
          type: object
          additionalProperties: true
      description: Unified error contract produced by AllExceptionsFilter (non-wrapped).
    BannerDto:
      type: object
      properties:
        imageUrl:
          type: string
          format: uri
          example: https://cdn.example.com/merchants/mrc_123/banners/b1.webp
        title:
          type: string
          nullable: true
          example: عروض اليوم
        linkUrl:
          type: string
          format: uri
          nullable: true
          example: https://store.example.com/offers/today
        order:
          type: integer
          nullable: true
          example: 1
        active:
          type: boolean
          nullable: true
          example: true
      required:
      - imageUrl
    Storefront:
      type: object
      properties:
        id:
          type: string
          example: sf_123
        merchantId:
          type: string
          example: mrc_123
        slug:
          type: string
          example: my-shop
        name:
          type: string
          example: متجر كريم
        description:
          type: string
          nullable: true
        brand:
          type: string
          example: '#FF8500'
          description: Primary brand color (dark)
        logoUrl:
          type: string
          format: uri
          nullable: true
        coverUrl:
          type: string
          format: uri
          nullable: true
        isActive:
          type: boolean
          example: true
        useStorefrontBrand:
          type: boolean
          example: true
        contact:
          type: object
          properties:
            phone:
              type: string
              nullable: true
            whatsapp:
              type: string
              nullable: true
            email:
              type: string
              format: email
              nullable: true
        social:
          type: object
          properties:
            twitter:
              type: string
              nullable: true
            instagram:
              type: string
              nullable: true
            tiktok:
              type: string
              nullable: true
            facebook:
              type: string
              nullable: true
        banners:
          type: array
          items:
            $ref: '#/components/schemas/BannerDto'
        featuredProductIds:
          type: array
          items:
            type: string
      required:
      - merchantId
      - slug
      - isActive
    CreateStorefrontDto:
      type: object
      properties:
        merchantId:
          type: string
        slug:
          type: string
          description: If omitted, may be synced from merchant.publicSlug
        name:
          type: string
        description:
          type: string
        brand:
          type: string
          example: '#FF8500'
        logoUrl:
          type: string
          format: uri
        coverUrl:
          type: string
          format: uri
        isActive:
          type: boolean
          default: true
        useStorefrontBrand:
          type: boolean
          default: true
        contact:
          $ref: '#/components/schemas/Storefront/properties/contact'
        social:
          $ref: '#/components/schemas/Storefront/properties/social'
        banners:
          type: array
          items:
            $ref: '#/components/schemas/BannerDto'
        featuredProductIds:
          type: array
          items:
            type: string
      required:
      - merchantId
    UpdateStorefrontDto:
      allOf:
      - $ref: '#/components/schemas/CreateStorefrontDto'
    SlugCheckResponse:
      type: object
      properties:
        available:
          type: boolean
      required:
      - available
    UploadBannersResult:
      type: object
      properties:
        urls:
          type: array
          items:
            type: string
            format: uri
        accepted:
          type: integer
        remaining:
          type: integer
        max:
          type: integer
      required:
      - urls
      - accepted
      - remaining
      - max
    MyOrdersResponse:
      type: object
      properties:
        orders:
          type: array
          items:
            type: object
            additionalProperties: true
      required:
      - orders
    CssResponse:
      type: string
      example: :root{--brand:#111827;}
      description: Raw CSS text.
    CreateContactDto:
      type: object
      properties:
        phone:
          type: string
    support.updated_ApiResponseBase:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          nullable: true
          example: null
        requestId:
          type: string
          nullable: true
          example: req_123456789
        timestamp:
          type: string
          format: date-time
          example: '2025-09-26T00:00:00.000Z'
      required:
      - success
      - timestamp
      additionalProperties: false
    support.updated_ApiResponseAny:
      allOf:
      - $ref: '#/components/schemas/ApiResponseBase'
      - type: object
        properties:
          data:
            type: object
    support.updated_PageInfo:
      type: object
      properties:
        nextCursor:
          type: string
          nullable: true
        previousCursor:
          type: string
          nullable: true
        hasNext:
          type: boolean
        hasPrev:
          type: boolean
        limit:
          type: integer
          minimum: 1
          maximum: 100
          example: 20
      required:
      - hasNext
      - hasPrev
      - limit
      additionalProperties: false
    support.updated_CursorPageObject:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
        pageInfo:
          $ref: '#/components/schemas/PageInfo'
      required:
      - items
      - pageInfo
      additionalProperties: false
    support.updated_ApiResponseCursorPage:
      allOf:
      - $ref: '#/components/schemas/ApiResponseBase'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/CursorPageObject'
    support.updated_ErrorResponse:
      type: object
      properties:
        code:
          type: string
          example: VALIDATION_ERROR
        message:
          type: string
          example: Invalid request data
        details:
          oneOf:
          - type: array
            items:
              type: string
          - type: object
            additionalProperties: true
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string
          nullable: true
      required:
      - code
      - message
      - timestamp
      additionalProperties: false
    system.updated_ApiResponseBase:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          nullable: true
          example: null
        requestId:
          type: string
          nullable: true
          example: req_123456789
        timestamp:
          type: string
          format: date-time
          example: '2025-09-26T00:00:00.000Z'
      required:
      - success
      - timestamp
      additionalProperties: false
    system.updated_ApiResponseAny:
      allOf:
      - $ref: '#/components/schemas/ApiResponseBase'
      - type: object
        properties:
          data:
            type: object
    system.updated_PageInfo:
      type: object
      properties:
        nextCursor:
          type: string
          nullable: true
        previousCursor:
          type: string
          nullable: true
        hasNext:
          type: boolean
        hasPrev:
          type: boolean
        limit:
          type: integer
          minimum: 1
          maximum: 100
          example: 20
      required:
      - hasNext
      - hasPrev
      - limit
      additionalProperties: false
    system.updated_CursorPageObject:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
        pageInfo:
          $ref: '#/components/schemas/PageInfo'
      required:
      - items
      - pageInfo
      additionalProperties: false
    system.updated_ApiResponseCursorPage:
      allOf:
      - $ref: '#/components/schemas/ApiResponseBase'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/CursorPageObject'
    system.updated_ErrorResponse:
      type: object
      properties:
        code:
          type: string
          example: VALIDATION_ERROR
        message:
          type: string
          example: Invalid request data
        details:
          oneOf:
          - type: array
            items:
              type: string
          - type: object
            additionalProperties: true
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string
          nullable: true
      required:
      - code
      - message
      - timestamp
      additionalProperties: false
    usage.updated_ApiResponseBase:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          nullable: true
          example: null
        requestId:
          type: string
          nullable: true
          example: req_123456789
        timestamp:
          type: string
          format: date-time
          example: '2025-09-26T00:00:00.000Z'
      required:
      - success
      - timestamp
      additionalProperties: false
    usage.updated_ApiResponseAny:
      allOf:
      - $ref: '#/components/schemas/ApiResponseBase'
      - type: object
        properties:
          data:
            type: object
    usage.updated_PageInfo:
      type: object
      properties:
        nextCursor:
          type: string
          nullable: true
        previousCursor:
          type: string
          nullable: true
        hasNext:
          type: boolean
        hasPrev:
          type: boolean
        limit:
          type: integer
          minimum: 1
          maximum: 100
          example: 20
      required:
      - hasNext
      - hasPrev
      - limit
      additionalProperties: false
    usage.updated_CursorPageObject:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
        pageInfo:
          $ref: '#/components/schemas/PageInfo'
      required:
      - items
      - pageInfo
      additionalProperties: false
    usage.updated_ApiResponseCursorPage:
      allOf:
      - $ref: '#/components/schemas/ApiResponseBase'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/CursorPageObject'
    usage.updated_ErrorResponse:
      type: object
      properties:
        code:
          type: string
          example: VALIDATION_ERROR
        message:
          type: string
          example: Invalid request data
        details:
          oneOf:
          - type: array
            items:
              type: string
          - type: object
            additionalProperties: true
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string
          nullable: true
      required:
      - code
      - message
      - timestamp
      additionalProperties: false
    CreateUserDto:
      type: object
      properties:
        id:
          type: string
      required:
      - id
    NotificationsPrefsDto:
      type: object
      properties:
        channels:
          type: string
        topics:
          type: string
        quietHours:
          type: string
      required:
      - channels
      - topics
      - quietHours
    users.fixed_ApiSuccessBase:
      type: object
      required:
      - success
      - timestamp
      properties:
        success:
          type: boolean
          example: true
        data: {}
        requestId:
          type: string
          nullable: true
          example: req-abc123
        timestamp:
          type: string
          format: date-time
          example: '2025-09-25T19:45:00.000Z'
      description: Global success envelope returned by ResponseInterceptor. `data`
        contains the actual payload.
    users.fixed_ApiError:
      type: object
      required:
      - status
      - code
      - message
      - timestamp
      properties:
        status:
          type: integer
          example: 401
        code:
          type: string
          example: INVALID_TOKEN
        message:
          type: string
          example: توكن غير صحيح
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string
          nullable: true
        details:
          type: object
          additionalProperties: true
      description: Unified error contract produced by AllExceptionsFilter (non-wrapped).
    users.fixed_ErrorResponse:
      $ref: '#/components/schemas/ApiError'
    users.fixed_User:
      type: object
      properties:
        id:
          type: string
          example: u_123
        name:
          type: string
          example: Ahmad
        email:
          type: string
          format: email
          example: user@example.com
        role:
          type: string
          example: MERCHANT
        merchantId:
          type: string
          nullable: true
          example: mrc_123
        firstLogin:
          type: boolean
          example: false
        emailVerified:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
      - id
      - email
      - role
    UsersList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/User'
        total:
          type: integer
          minimum: 0
          example: 1
        page:
          type: integer
          minimum: 1
          example: 1
        pageSize:
          type: integer
          minimum: 1
          example: 20
      required:
      - items
      - total
    users.fixed_MessageResponse:
      type: object
      properties:
        message:
          type: string
          example: OK
      required:
      - message
    UserEnvelope:
      allOf:
      - $ref: '#/components/schemas/ApiSuccessBase'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/User'
    UsersListEnvelope:
      allOf:
      - $ref: '#/components/schemas/ApiSuccessBase'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/UsersList'
    users.fixed_MessageResponseEnvelope:
      allOf:
      - $ref: '#/components/schemas/ApiSuccessBase'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/MessageResponse'
    NotificationsPrefsEnvelope:
      allOf:
      - $ref: '#/components/schemas/ApiSuccessBase'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/NotificationsPrefsDto'
    vector.fixed_ApiSuccessBase:
      type: object
      required:
      - success
      - timestamp
      properties:
        success:
          type: boolean
          example: true
        data: {}
        requestId:
          type: string
          nullable: true
          example: req-abc123
        timestamp:
          type: string
          format: date-time
          example: '2025-09-26T12:30:00.000Z'
      description: Global success envelope returned by ResponseInterceptor. `data`
        contains the actual payload.
    vector.fixed_ApiError:
      type: object
      required:
      - status
      - code
      - message
      - timestamp
      properties:
        status:
          type: integer
          example: 400
        code:
          type: string
          example: VALIDATION_ERROR
        message:
          type: string
          example: query is required
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string
          nullable: true
        details:
          type: object
          additionalProperties: true
      description: Unified error contract produced by AllExceptionsFilter (non-wrapped).
    SemanticSearchRequest:
      type: object
      properties:
        merchantId:
          type: string
          description: Target merchant scope for search
          example: mrc_123
        query:
          type: string
          description: User search text
          example: قهوة عربية بدون سكر
        topK:
          type: integer
          minimum: 1
          maximum: 10
          default: 5
          description: Max results to return (1..10)
      required:
      - merchantId
      - query
    IndexProductsRequest:
      type: object
      properties:
        merchantId:
          type: string
          example: mrc_123
        productIds:
          type: array
          items:
            type: string
          description: If omitted, a full reindex may be performed
        mode:
          type: string
          enum:
          - upsert
          - rebuild
          default: upsert
          description: '`rebuild` will drop & recreate merchant namespace/points'
        batchSize:
          type: integer
          minimum: 1
          maximum: 500
          default: 100
        dryRun:
          type: boolean
          default: false
      required:
      - merchantId
    ProductHit:
      type: object
      properties:
        id:
          type: string
          example: prd_123
        score:
          type: number
          format: float
          example: 0.86
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: double
          nullable: true
        currency:
          type: string
          nullable: true
        image:
          type: string
          nullable: true
          format: uri
        category:
          type: string
          nullable: true
        slug:
          type: string
          nullable: true
      required:
      - id
      - score
    OfferHit:
      type: object
      properties:
        id:
          type: string
        score:
          type: number
          format: float
        name:
          type: string
        description:
          type: string
        code:
          type: string
          nullable: true
      required:
      - id
      - score
      - name
    FaqHit:
      type: object
      properties:
        id:
          type: string
        question:
          type: string
        answer:
          type: string
        score:
          type: number
          format: float
      required:
      - id
      - question
      - answer
      - score
    UnifiedSearchResponse:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductHit'
        offers:
          type: array
          items:
            $ref: '#/components/schemas/OfferHit'
        faqs:
          type: array
          items:
            $ref: '#/components/schemas/FaqHit'
      required:
      - products
    IndexSummary:
      type: object
      properties:
        indexed:
          type: integer
          example: 120
        updated:
          type: integer
          example: 15
        skipped:
          type: integer
          example: 4
        failed:
          type: integer
          example: 1
        durationMs:
          type: integer
          example: 8243
        collection:
          type: string
          example: products
      required:
      - indexed
      - updated
      - skipped
      - failed
      - collection
    IndexStatus:
      type: object
      properties:
        merchantId:
          type: string
        collections:
          type: object
          properties:
            products:
              type: object
              properties:
                vectors:
                  type: integer
                  example: 2000
                dim:
                  type: integer
                  example: 1536
                lastIndexedAt:
                  type: string
                  format: date-time
                  nullable: true
            offers:
              type: object
              properties:
                vectors:
                  type: integer
                  example: 200
                dim:
                  type: integer
                  example: 1536
                lastIndexedAt:
                  type: string
                  format: date-time
                  nullable: true
            faqs:
              type: object
              properties:
                vectors:
                  type: integer
                  example: 150
                dim:
                  type: integer
                  example: 1536
                lastIndexedAt:
                  type: string
                  format: date-time
                  nullable: true
      required:
      - merchantId
      - collections
    webhooks.fixed_ApiSuccessBase:
      type: object
      required:
      - success
      - timestamp
      properties:
        success:
          type: boolean
          example: true
        data: {}
        requestId:
          type: string
          nullable: true
          example: req-abc123
        timestamp:
          type: string
          format: date-time
          example: '2025-09-26T12:00:00.000Z'
      description: Global success envelope returned by ResponseInterceptor. `data`
        contains the actual payload.
    webhooks.fixed_ApiError:
      type: object
      required:
      - status
      - code
      - message
      - timestamp
      properties:
        status:
          type: integer
          example: 403
        code:
          type: string
          example: FORBIDDEN
        message:
          type: string
          example: Signature verification failed
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string
          nullable: true
        details:
          type: object
          additionalProperties: true
      description: Unified error contract produced by AllExceptionsFilter (non-wrapped).
    OkAck:
      type: object
      properties:
        ok:
          type: boolean
          example: true
      required:
      - ok
    webhooks.fixed_MessageResponse:
      type: object
      properties:
        message:
          type: string
          example: OK
      required:
      - message
    BotReplyDto:
      type: object
      properties:
        sessionId:
          type: string
          example: 9665xxxxxxx
        text:
          type: string
          example: مرحباً 👋
        channel:
          type: string
          enum:
          - webchat
          - whatsapp
          - telegram
        metadata:
          type: object
          additionalProperties: true
        eventType:
          type: string
          example: product.updated
        payload:
          type: object
          additionalProperties: true
      required:
      - sessionId
      - text
      - channel
    AgentReplyDto:
      type: object
      properties:
        sessionId:
          type: string
        text:
          type: string
        channel:
          type: string
          enum:
          - webchat
          - whatsapp
          - telegram
        agentId:
          type: string
        metadata:
          type: object
          additionalProperties: true
      required:
      - sessionId
      - text
      - channel
    WhatsAppCloudPayload:
      type: object
      additionalProperties: true
    TelegramUpdate:
      type: object
      additionalProperties: true
    WhatsAppQrPayload:
      type: object
      properties:
        messages:
          type: array
          items:
            type: object
            additionalProperties: true
        status:
          type: string
        connection:
          type: string
      additionalProperties: true
    kleem.generated_ApiResponseBase:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          nullable: true
          example: null
        requestId:
          type: string
          nullable: true
          example: req_123
        timestamp:
          type: string
          format: date-time
          example: '2025-09-26T00:00:00.000Z'
      required:
      - success
      - timestamp
      additionalProperties: false
    kleem.generated_ApiResponseAny:
      allOf:
      - $ref: '#/components/schemas/ApiResponseBase'
      - type: object
        properties:
          data:
            type: object
    kleem.generated_PageInfo:
      type: object
      properties:
        nextCursor:
          type: string
          nullable: true
        previousCursor:
          type: string
          nullable: true
        hasNext:
          type: boolean
        hasPrev:
          type: boolean
        limit:
          type: integer
          minimum: 1
          maximum: 100
          example: 20
      required:
      - hasNext
      - hasPrev
      - limit
      additionalProperties: false
    kleem.generated_CursorPageObject:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
        pageInfo:
          $ref: '#/components/schemas/PageInfo'
      required:
      - items
      - pageInfo
      additionalProperties: false
    kleem.generated_ApiResponseCursorPage:
      allOf:
      - $ref: '#/components/schemas/ApiResponseBase'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/CursorPageObject'
    kleem.generated_ErrorResponse:
      type: object
      properties:
        code:
          type: string
          example: VALIDATION_ERROR
        message:
          type: string
          example: Invalid request data
        details:
          oneOf:
          - type: array
            items:
              type: string
          - type: object
            additionalProperties: true
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string
          nullable: true
      required:
      - code
      - message
      - timestamp
      additionalProperties: false
  parameters:
    CursorParam:
      name: cursor
      in: query
      required: false
      schema:
        type: string
    LimitParam:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    catalog.generated_CursorParam:
      name: cursor
      in: query
      required: false
      schema:
        type: string
      description: Cursor returned from a previous request.
    catalog.generated_LimitParam:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      description: Max number of items to return (1-100). Default 20.
    integrations.generated_CursorParam:
      name: cursor
      in: query
      required: false
      schema:
        type: string
    integrations.generated_LimitParam:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    n8n.generated_CursorParam:
      name: cursor
      in: query
      required: false
      schema:
        type: string
    n8n.generated_LimitParam:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    notifications.updated_CursorParam:
      name: cursor
      in: query
      required: false
      schema:
        type: string
      description: Cursor returned from a previous request.
    notifications.updated_LimitParam:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      description: Max number of items to return (1-100). Default 20.
    plans.updated_CursorParam:
      name: cursor
      in: query
      required: false
      schema:
        type: string
      description: Cursor returned from a previous request.
    plans.updated_LimitParam:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      description: Max number of items to return (1-100). Default 20.
    products.fixed_CursorParam:
      in: query
      name: cursor
      required: false
      schema:
        type: string
      description: Opaque base64 pointer to the next page.
    products.fixed_LimitParam:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      description: Max items per page.
    SortOrderParam:
      in: query
      name: sortOrder
      required: false
      schema:
        type: string
        enum:
        - asc
        - desc
        default: desc
    SortByParam:
      in: query
      name: sortBy
      required: false
      schema:
        type: string
        enum:
        - createdAt
        - updatedAt
        - name
        - price
        default: createdAt
    public.generated_CursorParam:
      name: cursor
      in: query
      required: false
      schema:
        type: string
    public.generated_LimitParam:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    support.updated_CursorParam:
      name: cursor
      in: query
      required: false
      schema:
        type: string
      description: Cursor returned from a previous request.
    support.updated_LimitParam:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      description: Max number of items to return (1-100). Default 20.
    system.updated_CursorParam:
      name: cursor
      in: query
      required: false
      schema:
        type: string
      description: Cursor returned from a previous request.
    system.updated_LimitParam:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      description: Max number of items to return (1-100). Default 20.
    usage.updated_CursorParam:
      name: cursor
      in: query
      required: false
      schema:
        type: string
      description: Cursor returned from a previous request.
    usage.updated_LimitParam:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      description: Max number of items to return (1-100). Default 20.
    kleem.generated_CursorParam:
      name: cursor
      in: query
      required: false
      schema:
        type: string
    kleem.generated_LimitParam:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
  responses:
    Error400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Error401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Error403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Error404:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Error409:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Error422:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Error429:
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Error500:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Error502:
      description: Bad Gateway
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    catalog.generated_Error400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    catalog.generated_Error401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    catalog.generated_Error403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    catalog.generated_Error404:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    catalog.generated_Error409:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    catalog.generated_Error422:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    catalog.generated_Error429:
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    catalog.generated_Error500:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    integrations.generated_Error400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    integrations.generated_Error401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    integrations.generated_Error403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    integrations.generated_Error404:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    integrations.generated_Error409:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    integrations.generated_Error422:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    integrations.generated_Error429:
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    integrations.generated_Error500:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    integrations.generated_Error502:
      description: Bad Gateway
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    n8n.generated_Error400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    n8n.generated_Error401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    n8n.generated_Error403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    n8n.generated_Error404:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    n8n.generated_Error409:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    n8n.generated_Error422:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    n8n.generated_Error429:
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    n8n.generated_Error500:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    n8n.generated_Error502:
      description: Bad Gateway
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    notifications.updated_Error400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    notifications.updated_Error401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    notifications.updated_Error403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    notifications.updated_Error404:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    notifications.updated_Error409:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    notifications.updated_Error422:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    notifications.updated_Error429:
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    notifications.updated_Error500:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    notifications.updated_Error502:
      description: Bad Gateway
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    plans.updated_Error400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    plans.updated_Error401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    plans.updated_Error403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    plans.updated_Error404:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    plans.updated_Error409:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    plans.updated_Error422:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    plans.updated_Error429:
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    plans.updated_Error500:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    plans.updated_Error502:
      description: Bad Gateway
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    public.generated_Error400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    public.generated_Error401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    public.generated_Error403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    public.generated_Error404:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    public.generated_Error409:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    public.generated_Error422:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    public.generated_Error429:
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    public.generated_Error500:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    public.generated_Error502:
      description: Bad Gateway
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    support.updated_Error400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    support.updated_Error401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    support.updated_Error403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    support.updated_Error404:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    support.updated_Error409:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    support.updated_Error422:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    support.updated_Error429:
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    support.updated_Error500:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    support.updated_Error502:
      description: Bad Gateway
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    system.updated_Error400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    system.updated_Error401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    system.updated_Error403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    system.updated_Error404:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    system.updated_Error409:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    system.updated_Error422:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    system.updated_Error429:
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    system.updated_Error500:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    system.updated_Error502:
      description: Bad Gateway
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    usage.updated_Error400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    usage.updated_Error401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    usage.updated_Error403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    usage.updated_Error404:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    usage.updated_Error409:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    usage.updated_Error422:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    usage.updated_Error429:
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    usage.updated_Error500:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    usage.updated_Error502:
      description: Bad Gateway
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    kleem.generated_Error400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    kleem.generated_Error401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    kleem.generated_Error403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    kleem.generated_Error404:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    kleem.generated_Error409:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    kleem.generated_Error422:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    kleem.generated_Error429:
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    kleem.generated_Error500:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    kleem.generated_Error502:
      description: Bad Gateway
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  requestBodies: {}
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
    csrf:
      type: apiKey
      in: header
      name: X-CSRF-Token
    catalog.generated_BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    categories.fixed_bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
    channels.fixed_bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
    chat.fixed_bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
    documents.fixed_bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
    faq.fixed_bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
    instructions.fixed_bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
    integrations.generated_BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    knowledge.fixed_bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
    leads.fixed_bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
    media.fixed_bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
    merchants.fixed_bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
    messaging.fixed_bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
    n8n.generated_BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    notifications.updated_bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
    offers.fixed_bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
    plans.updated_bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
    products.fixed_bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
    public.generated_BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    storefront.fixed_bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
    support.updated_bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
    system.updated_bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
    usage.updated_bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
    users.fixed_bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
    vector.fixed_bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
    waCloudSignature256:
      type: apiKey
      in: header
      name: X-Hub-Signature-256
      description: HMAC-SHA256 of the raw request body computed with your app/channel
        secret, format 'sha256=...'.
    telegramSecret:
      type: apiKey
      in: header
      name: X-Telegram-Bot-Api-Secret-Token
      description: Must match TELEGRAM_WEBHOOK_SECRET.
    evolutionApiKey:
      type: apiKey
      in: header
      name: x-evolution-apikey
      description: Must match EVOLUTION_APIKEY/EVOLUTION_API_KEY.
    evolutionApiKeyLegacy:
      type: apiKey
      in: header
      name: apikey
      description: Legacy header; must match EVOLUTION_APIKEY/EVOLUTION_API_KEY.
    Order:
      type: object
      properties:
        _id:
          type: string
          example: 66fa1f5f9a8e6f0012d3c111
        product:
          type: string
          example: 66fa1f5f9a8e6f0012d3c222
        name:
          type: string
          example: Premium Coffee
        price:
          type: number
          format: double
          example: 29.99
        quantity:
          type: integer
          example: 2
        merchantId:
          type: string
          example: mrc_123
        sessionId:
          type: string
          example: sess_123456
        customer:
          type: string
          example: +966501234567
        products:
          type: array
          items:
            type: string
          example: ["66fa1f5f9a8e6f0012d3c222", "66fa1f5f9a8e6f0012d3c333"]
        status:
          type: string
          enum:
            - pending
            - processing
            - shipped
            - delivered
            - cancelled
          example: pending
        externalId:
          type: string
          nullable: true
          example: "ORD-001"
        source:
          type: string
          enum:
            - whatsapp
            - web
            - api
          example: whatsapp
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - _id
        - name
        - price
        - quantity
        - merchantId
        - status
        - createdAt
        - updatedAt
    Plan:
      type: object
      properties:
        _id:
          type: string
          example: 66fa1f5f9a8e6f0012d3c444
        name:
          type: string
          example: Professional Plan
        priceCents:
          type: integer
          example: 2999
        currency:
          type: string
          enum:
            - USD
            - SAR
            - AED
          example: USD
        durationDays:
          type: integer
          example: 30
        messageLimit:
          type: integer
          example: 10000
        llmEnabled:
          type: boolean
          example: true
        isTrial:
          type: boolean
          example: false
        isActive:
          type: boolean
          example: true
        description:
          type: string
          example: Perfect for growing businesses
        features:
          type: array
          items:
            type: string
          example: ["AI Assistant", "Analytics", "Multi-channel"]
        billingPeriod:
          type: string
          enum:
            - monthly
            - yearly
          example: monthly
        trialPeriodDays:
          type: integer
          nullable: true
          example: 14
        archived:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - _id
        - name
        - priceCents
        - currency
        - durationDays
        - isActive
        - createdAt
        - updatedAt
    SubscriptionPlan:
      type: object
      properties:
        _id:
          type: string
          example: 66fa1f5f9a8e6f0012d3c555
        merchantId:
          type: string
          example: mrc_123
        tier:
          type: string
          enum:
            - free
            - starter
            - professional
            - enterprise
          example: professional
        planId:
          type: string
          example: plan_123
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        features:
          type: array
          items:
            type: string
          example: ["AI Assistant", "Analytics", "Multi-channel"]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - _id
        - merchantId
        - tier
        - planId
        - startDate
        - createdAt
        - updatedAt
    Message:
      type: object
      properties:
        _id:
          type: string
          example: 66fa1f5f9a8e6f0012d3c666
        role:
          type: string
          enum:
            - user
            - assistant
            - system
          example: user
        text:
          type: string
          example: مرحبا، كيف يمكنني مساعدتك اليوم؟
        timestamp:
          type: string
          format: date-time
        metadata:
          type: object
          additionalProperties: true
        keywords:
          type: array
          items:
            type: string
          example: ["تحية", "مساعدة"]
        rating:
          type: integer
          minimum: 1
          maximum: 5
          nullable: true
        feedback:
          type: string
          nullable: true
        ratedBy:
          type: string
          nullable: true
        ratedAt:
          type: string
          format: date-time
          nullable: true
        merchantId:
          type: string
          example: mrc_123
        sessionId:
          type: string
          example: sess_123456
        transport:
          type: string
          enum:
            - whatsapp
            - telegram
            - web
          example: whatsapp
        channel:
          type: string
          example: chn_123
        handoverToAgent:
          type: boolean
          example: false
        messages:
          type: array
          items:
            type: string
          example: ["msg_1", "msg_2"]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - _id
        - role
        - text
        - timestamp
        - merchantId
        - createdAt
        - updatedAt
    MissingResponse:
      type: object
      properties:
        _id:
          type: string
          example: 66fa1f5f9a8e6f0012d3c777
        merchant:
          type: string
          example: mrc_123
        channel:
          type: string
          example: chn_123
        question:
          type: string
          example: ما هي أسعار الشحن؟
        botReply:
          type: string
          nullable: true
          example: آسف، لم أتمكن من فهم سؤالك
        sessionId:
          type: string
          example: sess_123456
        aiAnalysis:
          type: string
          nullable: true
        customerId:
          type: string
          example: +966501234567
        type:
          type: string
          enum:
            - unanswered
            - unclear
            - product_related
          example: unanswered
        resolved:
          type: boolean
          example: false
        resolvedAt:
          type: string
          format: date-time
          nullable: true
        resolvedBy:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - _id
        - merchant
        - channel
        - question
        - createdAt
        - updatedAt
    KleemMissingResponse:
      type: object
      properties:
        _id:
          type: string
          example: 66fa1f5f9a8e6f0012d3c888
        channel:
          type: string
          example: chn_123
        question:
          type: string
          example: كيف يمكنني إعادة طلبي؟
        botReply:
          type: string
          nullable: true
        sessionId:
          type: string
          nullable: true
          example: sess_123456
        customerId:
          type: string
          nullable: true
          example: +966501234567
        resolved:
          type: boolean
          example: false
        manualReply:
          type: string
          nullable: true
        category:
          type: string
          nullable: true
          example: returns
        aiAnalysis:
          type: string
          nullable: true
        sourceId:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - _id
        - channel
        - question
        - createdAt
        - updatedAt
    AnalyticsEvent:
      type: object
      properties:
        _id:
          type: string
          example: 66fa1f5f9a8e6f0012d3c999
        merchantId:
          type: string
          example: mrc_123
        type:
          type: string
          enum:
            - message_sent
            - message_received
            - order_created
            - user_interaction
          example: message_sent
        channel:
          type: string
          example: chn_123
        payload:
          type: object
          additionalProperties: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - _id
        - merchantId
        - type
        - channel
        - createdAt
        - updatedAt
    Faq:
      type: object
      properties:
        _id:
          type: string
          example: 66fa1f5f9a8e6f0012d3caaa
        merchantId:
          type: string
          example: mrc_123
        question:
          type: string
          example: ما هي طرق الدفع المتاحة؟
        answer:
          type: string
          example: نقبل الدفع عبر بطاقات الائتمان والحوالات البنكية
        status:
          type: string
          enum:
            - active
            - inactive
            - draft
          example: active
        errorMessage:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - _id
        - merchantId
        - question
        - answer
        - status
        - createdAt
        - updatedAt
    Document:
      type: object
      properties:
        _id:
          type: string
          example: 66fa1f5f9a8e6f0012d3cbbb
        merchantId:
          type: string
          example: mrc_123
        filename:
          type: string
          example: policy.pdf
        fileType:
          type: string
          example: application/pdf
        storageKey:
          type: string
          example: docs/policy.pdf
        status:
          type: string
          enum:
            - pending
            - processing
            - completed
            - failed
          example: completed
        errorMessage:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - _id
        - merchantId
        - filename
        - fileType
        - storageKey
        - status
        - createdAt
        - updatedAt
    Integration:
      type: object
      properties:
        _id:
          type: string
          example: 66fa1f5f9a8e6f0012d3cccc
        merchantId:
          type: string
          example: mrc_123
        provider:
          type: string
          enum:
            - shopify
            - woocommerce
            - magento
            - custom
          example: shopify
        active:
          type: boolean
          example: true
        accessToken:
          type: string
          nullable: true
        refreshToken:
          type: string
          nullable: true
        tokenType:
          type: string
          nullable: true
          example: Bearer
        expiresIn:
          type: integer
          nullable: true
        expiresAt:
          type: string
          format: date-time
          nullable: true
        managerToken:
          type: string
          nullable: true
        authorizationToken:
          type: string
          nullable: true
        storeId:
          type: string
          nullable: true
          example: store_123
        storeUrl:
          type: string
          nullable: true
          example: https://mystore.myshopify.com
        scopes:
          type: array
          items:
            type: string
          example: ["read_products", "write_products"]
        lastSync:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - _id
        - merchantId
        - provider
        - active
        - createdAt
        - updatedAt
    Lead:
      type: object
      properties:
        _id:
          type: string
          example: 66fa1f5f9a8e6f0012d3cddd
        merchantId:
          type: string
          example: mrc_123
        sessionId:
          type: string
          example: sess_123456
        data:
          type: object
          additionalProperties: true
        source:
          type: string
          enum:
            - whatsapp
            - web
            - api
          example: whatsapp
        phoneNormalized:
          type: string
          example: "+966501234567"
        name:
          type: string
          nullable: true
          example: محمد أحمد
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - _id
        - merchantId
        - sessionId
        - data
        - source
        - createdAt
        - updatedAt
    Notification:
      type: object
      properties:
        _id:
          type: string
          example: 66fa1f5f9a8e6f0012d3ceee
        userId:
          type: string
          example: user_123
        merchantId:
          type: string
          example: mrc_123
        type:
          type: string
          enum:
            - info
            - warning
            - error
            - success
          example: info
        title:
          type: string
          example: تحديث هام
        body:
          type: string
          example: تم تحديث نظامك بنجاح
        data:
          type: object
          additionalProperties: true
        severity:
          type: string
          enum:
            - low
            - medium
            - high
            - critical
          example: medium
        read:
          type: boolean
          example: false
        readAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - _id
        - userId
        - merchantId
        - type
        - title
        - body
        - severity
        - read
        - createdAt
        - updatedAt
    Stats:
      type: object
      properties:
        _id:
          type: string
          example: 66fa1f5f9a8e6f0012d3cfff
        merchantId:
          type: string
          example: mrc_123
        period:
          type: string
          enum:
            - daily
            - weekly
            - monthly
            - yearly
          example: daily
        date:
          type: string
          format: date
          example: '2025-09-26'
        productCount:
          type: integer
          example: 150
        messagesByChannel:
          type: object
          additionalProperties:
            type: integer
          example:
            whatsapp: 245
            telegram: 89
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - _id
        - merchantId
        - period
        - date
        - createdAt
        - updatedAt
    UnavailableProduct:
      type: object
      properties:
        _id:
          type: string
          example: 66fa1f5f9a8e6f0012d3c000
        merchant:
          type: string
          example: mrc_123
        channel:
          type: string
          example: chn_123
        productName:
          type: string
          example: Premium Coffee - Out of Stock
        question:
          type: string
          example: هل لديكم قهوة بريميوم متوفرة؟
        botReply:
          type: string
          example: آسف، هذا المنتج غير متوفر حالياً
        sessionId:
          type: string
          example: sess_123456
        customerId:
          type: string
          example: +966501234567
        context:
          type: string
          nullable: true
        resolved:
          type: boolean
          example: false
        manualReply:
          type: string
          nullable: true
        category:
          type: string
          nullable: true
          example: availability
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - _id
        - merchant
        - channel
        - productName
        - question
        - createdAt
        - updatedAt
    Address:
      type: object
      properties:
        _id:
          type: string
          example: 66fa1f5f9a8e6f0012d3c111
        street:
          type: string
          example: King Fahd Road
        city:
          type: string
          example: Riyadh
        state:
          type: string
          example: Riyadh Province
        postalCode:
          type: string
          example: "12345"
        country:
          type: string
          example: Saudi Arabia
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - _id
        - street
        - city
        - state
        - postalCode
        - country
        - createdAt
        - updatedAt
    WorkingHours:
      type: object
      properties:
        _id:
          type: string
          example: 66fa1f5f9a8e6f0012d3c222
        day:
          type: string
          enum:
            - monday
            - tuesday
            - wednesday
            - thursday
            - friday
            - saturday
            - sunday
          example: monday
        openTime:
          type: string
          format: time
          example: "09:00"
        closeTime:
          type: string
          format: time
          example: "17:00"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - _id
        - day
        - openTime
        - closeTime
        - createdAt
        - updatedAt
    SourceUrl:
      type: object
      properties:
        _id:
          type: string
          example: 66fa1f5f9a8e6f0012d3c333
        merchantId:
          type: string
          example: mrc_123
        url:
          type: string
          format: uri
          example: https://example.com
        status:
          type: string
          enum:
            - pending
            - processing
            - completed
            - failed
          example: completed
        errorMessage:
          type: string
          nullable: true
        textExtracted:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - _id
        - merchantId
        - url
        - status
        - createdAt
        - updatedAt
    kleem.generated_BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  headers: {}
